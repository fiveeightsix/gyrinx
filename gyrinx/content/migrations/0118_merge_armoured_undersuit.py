# Generated by Django 5.2.4 on 2025-07-17 09:59

from django.db import migrations


def merge_armoured_undersuit(apps, schema_editor):
    """
    Merge duplicate armoured undersuit equipment entries. Handles both American
    and British spellings, updating all references to use the correctly
    capitalized version.
    """
    ContentEquipment = apps.get_model("content", "ContentEquipment")

    # Define possible correct spellings (lowercase 'u')
    correct_spellings = ["Armoured undersuit", "Armored undersuit"]

    # Define possible incorrect spellings (capital 'U')
    incorrect_spellings = ["Armoured Undersuit", "Armored Undersuit"]

    # Find the correct equipment (prefer the one that exists)
    correct_equipment = None
    for spelling in correct_spellings:
        equipment = ContentEquipment.objects.filter(name=spelling).first()
        if equipment:
            correct_equipment = equipment
            print(f"Found correct equipment: {equipment.name} (id={equipment.id})")
            break

    if not correct_equipment:
        print("No correctly spelled equipment found. Skipping migration.")
        return

    # Find all incorrect equipment entries
    incorrect_equipment_list = []
    for spelling in incorrect_spellings:
        equipment = ContentEquipment.objects.filter(name=spelling).first()
        if equipment and equipment != correct_equipment:
            incorrect_equipment_list.append(equipment)
            print(f"Found incorrect equipment: {equipment.name} (id={equipment.id})")

    if not incorrect_equipment_list:
        print("No incorrectly spelled equipment found. Skipping migration.")
        return

    # Update all references for each incorrect equipment
    for incorrect_equipment in incorrect_equipment_list:
        print(
            f"\nMerging references from '{incorrect_equipment.name}' to '{correct_equipment.name}'..."
        )

        # 1. ListFighterEquipmentAssignment (user's actual equipment)
        ListFighterEquipmentAssignment = apps.get_model(
            "core", "ListFighterEquipmentAssignment"
        )
        assignments = ListFighterEquipmentAssignment.objects.filter(
            content_equipment=incorrect_equipment
        )
        count = assignments.count()
        if count > 0:
            print(f"  Updating {count} ListFighterEquipmentAssignments")
            assignments.update(content_equipment=correct_equipment)

        # 2. ContentFighterEquipmentListItem (rulebook availability)
        ContentFighterEquipmentListItem = apps.get_model(
            "content", "ContentFighterEquipmentListItem"
        )
        items = ContentFighterEquipmentListItem.objects.filter(
            equipment=incorrect_equipment
        )
        count = items.count()
        if count > 0:
            print(f"  Updating {count} ContentFighterEquipmentListItems")
            items.update(equipment=correct_equipment)

        # 3. ContentWeaponProfile (if any exist - unlikely for armor)
        ContentWeaponProfile = apps.get_model("content", "ContentWeaponProfile")
        profiles = ContentWeaponProfile.objects.filter(equipment=incorrect_equipment)
        count = profiles.count()
        if count > 0:
            print(f"  Updating {count} ContentWeaponProfiles")
            profiles.update(equipment=correct_equipment)

        # 4. ContentEquipmentFighterProfile
        ContentEquipmentFighterProfile = apps.get_model(
            "content", "ContentEquipmentFighterProfile"
        )
        fighter_profiles = ContentEquipmentFighterProfile.objects.filter(
            equipment=incorrect_equipment
        )
        count = fighter_profiles.count()
        if count > 0:
            print(f"  Updating {count} ContentEquipmentFighterProfiles")
            fighter_profiles.update(equipment=correct_equipment)

        # 5. ContentEquipmentEquipmentProfile (both foreign keys)
        ContentEquipmentEquipmentProfile = apps.get_model(
            "content", "ContentEquipmentEquipmentProfile"
        )
        equipment_profiles = ContentEquipmentEquipmentProfile.objects.filter(
            equipment=incorrect_equipment
        )
        count = equipment_profiles.count()
        if count > 0:
            print(
                f"  Updating {count} ContentEquipmentEquipmentProfiles (equipment field)"
            )
            equipment_profiles.update(equipment=correct_equipment)

        linked_profiles = ContentEquipmentEquipmentProfile.objects.filter(
            linked_equipment=incorrect_equipment
        )
        count = linked_profiles.count()
        if count > 0:
            print(
                f"  Updating {count} ContentEquipmentEquipmentProfiles (linked_equipment field)"
            )
            linked_profiles.update(linked_equipment=correct_equipment)

        # 6. ContentEquipmentUpgrade
        ContentEquipmentUpgrade = apps.get_model("content", "ContentEquipmentUpgrade")
        upgrades = ContentEquipmentUpgrade.objects.filter(equipment=incorrect_equipment)
        count = upgrades.count()
        if count > 0:
            print(f"  Updating {count} ContentEquipmentUpgrades")
            upgrades.update(equipment=correct_equipment)

        # 7. ContentFighterDefaultAssignment
        ContentFighterDefaultAssignment = apps.get_model(
            "content", "ContentFighterDefaultAssignment"
        )
        assignments = ContentFighterDefaultAssignment.objects.filter(
            equipment=incorrect_equipment
        )
        count = assignments.count()
        if count > 0:
            print(f"  Updating {count} ContentFighterDefaultAssignments")
            assignments.update(equipment=correct_equipment)

        # Finally, delete the incorrect equipment
        print(
            f"  Deleting incorrect equipment: {incorrect_equipment.name} (id={incorrect_equipment.id})"
        )
        incorrect_equipment.delete()

    print(
        f"\nMigration completed. All references now point to '{correct_equipment.name}'."
    )


def reverse_merge_armoured_undersuit(apps, schema_editor):
    """
    Reverse migration is not possible as we cannot restore the deleted equipment
    and determine which references belonged to which equipment entry.
    """
    print("Reverse migration not supported. Original data cannot be restored.")
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("content", "0117_add_can_hire_any_to_contenthouse"),
    ]

    operations = [
        migrations.RunPython(
            merge_armoured_undersuit, reverse_merge_armoured_undersuit
        ),
    ]
