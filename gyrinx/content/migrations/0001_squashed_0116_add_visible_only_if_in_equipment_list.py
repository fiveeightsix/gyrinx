# Generated by Django 5.2.4 on 2025-07-15 09:22

import django.db.models.deletion
import gyrinx.content.models
import simple_history.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    replaces = [
        ("content", "0001_initial"),
        ("content", "0002_alter_contenthouse_name_and_more"),
        ("content", "0003_alter_historicalcontentfighter_category_and_more"),
        ("content", "0004_alter_contentfighter_skills"),
        ("content", "0005_alter_contentequipment_category_and_more"),
        ("content", "0006_contentequipment_trading_post_available_and_more"),
        ("content", "0007_contentweaponprofile_contentweapontrait_and_more"),
        ("content", "0008_contentequipment_cost_and_more"),
        ("content", "0009_remove_contentequipment_weapon_profiles_and_more"),
        ("content", "0010_remove_historicalcontentfighterequipment_equipment_and_more"),
        ("content", "0011_alter_contentfighterequipmentlistitem_unique_together"),
        ("content", "0012_remove_contentfighter_equipment_and_more"),
        ("content", "0013_rename_weapon_profile_fields"),
        ("content", "0014_contentweaponprofile_cost_sign_and_more"),
        ("content", "0015_auto_20241124_2150"),
        ("content", "0016_alter_contentweapontrait_name_and_more"),
        ("content", "0017_alter_contentweaponprofile_cost_sign_and_more"),
        ("content", "0018_auto_20241127_1840"),
        ("content", "0019_contentfighter_attacks_and_more"),
        ("content", "0020_contentrule_contentfighter_rules_and_more"),
        ("content", "0021_auto_20241127_2057"),
        ("content", "0022_auto_20241127_2157"),
        ("content", "0023_auto_20241201_0940"),
        ("content", "0024_auto_20241201_1618"),
        ("content", "0025_auto_20241203_2049"),
        ("content", "0026_contentbook_alter_contentequipment_options_and_more"),
        ("content", "0027_alter_contentpageref_options_and_more"),
        ("content", "0028_alter_contentpageref_page_and_more"),
        ("content", "0029_alter_contentfighter_options_and_more"),
        ("content", "0030_alter_contentweaponprofile_options"),
        ("content", "0031_auto_20250103_0935"),
        ("content", "0032_alter_contentweaponprofile_cost_and_more"),
        ("content", "0033_alter_contentequipment_category_and_more"),
        ("content", "0034_alter_contentequipment_category_and_more"),
        ("content", "0035_historicalcontentfighterdefaultassignment_and_more"),
        ("content", "0036_alter_contentequipment_category_and_more"),
        ("content", "0037_remove_contentfighterdefaultassignment_weapon_profiles"),
        ("content", "0038_contentfighterdefaultassignment_weapon_profiles_field"),
        ("content", "0039_alter_contentweaponprofile_cost_and_more"),
        ("content", "0040_alter_contentequipment_rarity_and_more"),
        ("content", "0041_auto_20250114_2106"),
        ("content", "0042_contentskillcategory_alter_contentequipment_rarity_and_more"),
        ("content", "0043_auto_20250114_2124"),
        ("content", "0044_auto_20250114_2127"),
        ("content", "0045_remove_contentskill_category_and_more"),
        ("content", "0046_alter_contentskill_category_obj_and_more"),
        ("content", "0047_rename_category_obj_contentskill_category_and_more"),
        ("content", "0048_alter_contenthouse_skill_categories"),
        ("content", "0049_contentfighter_primary_skill_categories_and_more"),
        ("content", "0050_alter_contentskillcategory_options_and_more"),
        ("content", "0051_alter_contentfighter_primary_skill_categories_and_more"),
        ("content", "0052_alter_contentskill_options"),
        ("content", "0053_contentweaponaccessory_and_more"),
        ("content", "0054_contentfighterdefaultassignment_weapon_accessories_field"),
        ("content", "0055_contentweaponaccessory_cost_and_more"),
        (
            "content",
            "0056_historicalcontentfighterequipmentlistweaponaccessory_and_more",
        ),
        ("content", "0057_contentweaponaccessory_rarity_and_more"),
        ("content", "0058_alter_contentequipment_category_and_more"),
        ("content", "0059_alter_contentequipment_category_and_more"),
        ("content", "0060_alter_contentweaponprofile_rarity_and_more"),
        ("content", "0061_alter_contentfighter_options_and_more"),
        ("content", "0062_alter_contentequipment_category_and_more"),
        ("content", "0063_contentequipmentfighterprofile"),
        ("content", "0064_alter_contentequipmentfighterprofile_options_and_more"),
        ("content", "0065_historicalcontentequipmentfighterprofile"),
        ("content", "0066_alter_contentfighterdefaultassignment_unique_together"),
        ("content", "0067_contentfighterhouseoverride"),
        ("content", "0068_alter_contentfighterhouseoverride_unique_together"),
        ("content", "0069_contentequipment_upgrade_stack_name_and_more"),
        ("content", "0070_alter_contentequipmentupgrade_unique_together"),
        ("content", "0071_contenthouse_house_additional_rules_name_and_more"),
        ("content", "0072_alter_contenthouse_house_additional_rules_name_and_more"),
        ("content", "0073_alter_contentequipmentupgrade_name_and_more"),
        ("content", "0074_remove_contentweaponprofile_cost_sign_and_more"),
        ("content", "0075_contentpsykerdiscipline_and_more"),
        (
            "content",
            "0076_historicalcontentfighterpsykerpowerdefaultassignment_and_more",
        ),
        ("content", "0077_contentmod_and_more"),
        ("content", "0078_contentweaponaccessory_modifiers"),
        ("content", "0079_alter_contentmodstat_stat"),
        ("content", "0080_contentequipmentupgrade_modifiers"),
        ("content", "0081_alter_contentequipment_rarity_and_more"),
        ("content", "0082_contentequipmentcategory_and_more"),
        ("content", "0083_auto_20250413_1249"),
        ("content", "0084_contentequipment_category_obj_and_more"),
        ("content", "0085_auto_20250413_1256"),
        ("content", "0086_alter_contentequipment_unique_together"),
        ("content", "0087_alter_contentequipment_category_obj"),
        ("content", "0088_alter_contentequipment_unique_together"),
        ("content", "0089_alter_contentequipment_unique_together_and_more"),
        ("content", "0090_rename_category_obj_contentequipment_category_and_more"),
        ("content", "0091_contentequipmentcategory_restricted_to"),
        ("content", "0092_contentequipment_upgrade_mode_and_more"),
        ("content", "0093_alter_contentequipmentupgrade_position_and_more"),
        ("content", "0094_alter_contentequipmentupgrade_position_and_more"),
        ("content", "0095_contentmodfighterstat_alter_contentmodstat_options_and_more"),
        ("content", "0096_alter_contentequipmentupgrade_modifiers"),
        ("content", "0097_alter_contentmodfighterrule_options_and_more"),
        ("content", "0098_contentequipment_modifiers"),
        ("content", "0099_contentmodfighterskill"),
        ("content", "0100_historicalcontentequipmentequipmentprofile_and_more"),
        ("content", "0101_contentfighter_can_take_legacy_and_more"),
        ("content", "0102_contentfighter_can_be_legacy_and_more"),
        ("content", "0103_add_injury_models"),
        ("content", "0104_add_sample_injuries"),
        ("content", "0105_remove_contentinjury_page_refs"),
        ("content", "0106_alter_contentinjury_options"),
        ("content", "0107_update_injury_phase_to_default_outcome"),
        ("content", "0108_add_is_stash_field"),
        ("content", "0109_alter_contentfighter_category_and_more"),
        ("content", "0110_add_contentpack_model"),
        ("content", "0111_add_contentpack_history"),
        ("content", "0112_add_content_fighter_equipment_list_upgrade"),
        ("content", "0113_contentattribute_historicalcontentattribute_and_more"),
        ("content", "0114_add_restricted_to_content_attribute"),
        ("content", "0115_add_legacy_flag_to_contenthouse"),
        ("content", "0116_add_visible_only_if_in_equipment_list"),
    ]

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ContentHouse",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "House",
                "verbose_name_plural": "Houses",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ContentSkill",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "Skill",
                "verbose_name_plural": "Skills",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ContentEquipment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            (
                                "Gear",
                                [
                                    ("ARMOR", "Armor"),
                                    ("BIONICS", "Bionics"),
                                    ("BODY_UPGRADES", "Body Upgrades"),
                                    ("BOOBY_TRAPS", "Booby Traps"),
                                    ("CHEM_ALCHEMY_ELIXIRS", "Chem-alchemy Elixirs"),
                                    ("CHEMS", "Chems"),
                                    ("CYBERTEKNIKA", "Cyberteknika"),
                                    ("EQUIPMENT", "Personal Equipment"),
                                    ("FIELD_ARMOUR", "Field Armour"),
                                    ("GANG_EQUIPMENT", "Gang Equipment"),
                                    ("GANG_TERRAIN", "Gang Terrain"),
                                    ("GENE_SMITHING", "Gene-smithing"),
                                    ("RELICS", "Relics"),
                                    ("STATUS_ITEMS", "Status Items"),
                                ],
                            ),
                            (
                                "Vehicle & Mount",
                                [
                                    ("DRIVE_UPGRADES", "Drive Upgrades"),
                                    ("ENGINE_UPGRADES", "Engine Upgrades"),
                                    ("HARDPOINT_UPGRADES", "Hardpoint Upgrades"),
                                    ("MOUNTS", "Mounts"),
                                    ("VEHICLE_EQUIPMENT", "Vehicle Wargear"),
                                    ("VEHICLES", "Vehicles"),
                                ],
                            ),
                            (
                                "Weapons & Ammo",
                                [
                                    ("AMMO", "Ammo"),
                                    ("BASIC_WEAPONS", "Basic Weapons"),
                                    ("CLOSE_COMBAT", "Close Combat Weapons"),
                                    ("GRENADES", "Grenades"),
                                    ("HEAVY_WEAPONS", "Heavy Weapons"),
                                    ("PISTOLS", "Pistols"),
                                    ("POWER_PACK_WEAPONS", "Power Pack Weapons"),
                                    ("SPECIAL_WEAPONS", "Special Weapons"),
                                ],
                            ),
                            ("Other", [("OPTIONS", "Options")]),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "rarity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("R", "Rare (R)"),
                            ("I", "Illegal (I)"),
                            ("E", "Exclusive (E)"),
                            ("U", "Unique (U)"),
                            ("C", "Common (C)"),
                        ],
                        default="C",
                        help_text="Use 'E' to exclude this equipment from the Trading Post. Use 'U' for equipment that is unique to a fighter.",
                        max_length=1,
                        verbose_name="Availability",
                    ),
                ),
                (
                    "rarity_roll",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Availability Level"
                    ),
                ),
                (
                    "cost",
                    models.CharField(
                        blank=True,
                        help_text="The credit cost of the equipment at the Trading Post. Note that, in weapons, this is overridden by the 'Standard' weapon profile cost.",
                    ),
                ),
                (
                    "upgrade_stack_name",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="If applicable, the name of the stack of upgrades for this equipment (e.g. Upgrade or Augmentation). Use the singular form.",
                        max_length=255,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Equipment",
                "verbose_name_plural": "Equipment",
                "unique_together": {("name", "category")},
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ContentWeaponTrait",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Weapon Trait",
                "verbose_name_plural": "Weapon Traits",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ContentWeaponProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Leave blank if the profile has no name (i.e. is the default statline). Don't include the hyphen for named profiles.",
                        max_length=255,
                    ),
                ),
                (
                    "range_short",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Rng S"
                    ),
                ),
                (
                    "range_long",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Rng L"
                    ),
                ),
                (
                    "accuracy_short",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Acc S"
                    ),
                ),
                (
                    "accuracy_long",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Acc L"
                    ),
                ),
                (
                    "strength",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Str"
                    ),
                ),
                (
                    "armour_piercing",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Ap"
                    ),
                ),
                (
                    "damage",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="D"
                    ),
                ),
                (
                    "ammo",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Am"
                    ),
                ),
                (
                    "traits",
                    models.ManyToManyField(blank=True, to="content.contentweapontrait"),
                ),
                (
                    "cost",
                    models.IntegerField(
                        default=0,
                        help_text="The credit cost of the weapon profile at the Trading Post. If the cost is zero, then the profile is free to use and standard. This cost can be overridden by the fighter's equipment list.",
                    ),
                ),
                (
                    "equipment",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentequipment",
                    ),
                ),
                (
                    "rarity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("R", "Rare (R)"),
                            ("I", "Illegal (I)"),
                            ("E", "Exclusive (E)"),
                            ("C", "Common (C)"),
                        ],
                        default="C",
                        help_text="Use 'E' to exclude this profile from the Trading Post.",
                        max_length=1,
                        verbose_name="Availability",
                    ),
                ),
                (
                    "rarity_roll",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Availability Level"
                    ),
                ),
            ],
            options={
                "verbose_name": "Weapon Profile",
                "verbose_name_plural": "Weapon Profiles",
                "unique_together": {("equipment", "name")},
            },
        ),
        migrations.CreateModel(
            name="ContentRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "Rule",
                "verbose_name_plural": "Rules",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ContentFighter",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("type", models.CharField(max_length=255)),
                ("base_cost", models.IntegerField(default=0)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("LEADER", "Leader"),
                            ("CHAMPION", "Champion"),
                            ("GANGER", "Ganger"),
                            ("JUVE", "Juve"),
                            ("CREW", "Crew"),
                            ("EXOTIC_BEAST", "Exotic Beast"),
                            ("HANGER_ON", "Hanger-on"),
                            ("BRUTE", "Brute"),
                            ("HIRED_GUN", "Hired Gun"),
                            ("BOUNTY_HUNTER", "Bounty Hunter"),
                            ("HOUSE_AGENT", "House Agent"),
                            ("HIVE_SCUM", "Hive Scum"),
                            ("DRAMATIS_PERSONAE", "Dramatis Personae"),
                            ("PROSPECT", "Prospect"),
                            ("SPECIALIST", "Specialist"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "house",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contenthouse",
                    ),
                ),
                (
                    "skills",
                    models.ManyToManyField(blank=True, to="content.contentskill"),
                ),
                (
                    "attacks",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="A"
                    ),
                ),
                (
                    "ballistic_skill",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="BS"
                    ),
                ),
                (
                    "cool",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Cl"
                    ),
                ),
                (
                    "initiative",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="I"
                    ),
                ),
                (
                    "intelligence",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Int"
                    ),
                ),
                (
                    "leadership",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Ld"
                    ),
                ),
                (
                    "movement",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="M"
                    ),
                ),
                (
                    "strength",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="S"
                    ),
                ),
                (
                    "toughness",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="T"
                    ),
                ),
                (
                    "weapon_skill",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="WS"
                    ),
                ),
                (
                    "willpower",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Wil"
                    ),
                ),
                (
                    "wounds",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="W"
                    ),
                ),
                ("rules", models.ManyToManyField(blank=True, to="content.contentrule")),
            ],
            options={
                "verbose_name": "Fighter",
                "verbose_name_plural": "Fighters",
                "ordering": [
                    "house__name",
                    models.Case(
                        models.When(category="LEADER", then=0),
                        models.When(category="CHAMPION", then=1),
                        models.When(category="PROSPECT", then=2),
                        models.When(category="SPECIALIST", then=3),
                        models.When(category="GANGER", then=4),
                        models.When(category="JUVE", then=5),
                        default=99,
                    ),
                    "type",
                ],
            },
        ),
        migrations.CreateModel(
            name="ContentBook",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("shortname", models.CharField(blank=True, max_length=50)),
                ("year", models.CharField(blank=True)),
                ("description", models.TextField(blank=True)),
                ("type", models.CharField(blank=True, max_length=50)),
                ("obsolete", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Book",
                "verbose_name_plural": "Books",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ContentPageRef",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=255)),
                ("page", models.CharField(blank=True, max_length=50)),
                ("category", models.CharField(blank=True, max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentbook",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="content.contentpageref",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "ordering": ["category", "book__name", "title"],
                "verbose_name": "Page Reference",
                "verbose_name_plural": "Page References",
            },
        ),
        migrations.CreateModel(
            name="HistoricalContentPageRef",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("title", models.CharField(max_length=255)),
                ("page", models.CharField(blank=True, max_length=50)),
                ("category", models.CharField(blank=True, max_length=255)),
                ("description", models.TextField(blank=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "book",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentbook",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentpageref",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Page Reference",
                "verbose_name_plural": "historical Page References",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalContentWeaponTrait",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(db_index=True, max_length=255)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Weapon Trait",
                "verbose_name_plural": "historical Weapon Traits",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ContentSkillCategory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "restricted",
                    models.BooleanField(
                        default=False,
                        help_text="If checked, this skill tree is only available to specific gangs.",
                    ),
                ),
            ],
            options={
                "verbose_name": "Skill Tree",
                "verbose_name_plural": "Skill Trees",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalContentRule",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(max_length=255)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Rule",
                "verbose_name_plural": "historical Rules",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalContentPolicy",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("rules", models.JSONField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "fighter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentfighter",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Policy",
                "verbose_name_plural": "historical Policies",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="contentskill",
            name="category",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="skills",
                to="content.contentskillcategory",
                verbose_name="tree",
            ),
        ),
        migrations.AddField(
            model_name="contenthouse",
            name="skill_categories",
            field=models.ManyToManyField(
                blank=True,
                related_name="houses",
                to="content.contentskillcategory",
                verbose_name="Unique Skill Categories",
            ),
        ),
        migrations.AlterField(
            model_name="contentfighter",
            name="skills",
            field=models.ManyToManyField(
                blank=True, to="content.contentskill", verbose_name="Default Skills"
            ),
        ),
        migrations.CreateModel(
            name="HistoricalContentSkill",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(max_length=255)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentskillcategory",
                        verbose_name="tree",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Skill",
                "verbose_name_plural": "historical Skills",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="contentfighter",
            name="primary_skill_categories",
            field=models.ManyToManyField(
                blank=True,
                related_name="primary_fighters",
                to="content.contentskillcategory",
                verbose_name="Primary Skill Trees",
            ),
        ),
        migrations.AddField(
            model_name="contentfighter",
            name="secondary_skill_categories",
            field=models.ManyToManyField(
                blank=True,
                related_name="secondary_fighters",
                to="content.contentskillcategory",
                verbose_name="Secondary Skill Trees",
            ),
        ),
        migrations.AlterModelOptions(
            name="contentskill",
            options={
                "ordering": ["category", "name"],
                "verbose_name": "Skill",
                "verbose_name_plural": "Skills",
            },
        ),
        migrations.CreateModel(
            name="ContentWeaponAccessory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "cost",
                    models.IntegerField(
                        default=0,
                        help_text="The credit cost of the weapon accessory at the Trading Post. This cost can be overridden by the fighter's equipment list.",
                    ),
                ),
                (
                    "rarity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("R", "Rare (R)"),
                            ("I", "Illegal (I)"),
                            ("E", "Exclusive (E)"),
                            ("C", "Common (C)"),
                        ],
                        default="C",
                        help_text="Use 'E' to exclude this profile from the Trading Post.",
                        max_length=1,
                        verbose_name="Availability",
                    ),
                ),
                (
                    "rarity_roll",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Availability Level"
                    ),
                ),
            ],
            options={
                "verbose_name": "Weapon Accessory",
                "verbose_name_plural": "Weapon Accessories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalContentFighterEquipmentListWeaponAccessory",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("cost", models.IntegerField(default=0)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "fighter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentfighter",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "weapon_accessory",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentweaponaccessory",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Equipment List Weapon Accessory",
                "verbose_name_plural": "historical Equipment List Weapon Accessories",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ContentFighterEquipmentListWeaponAccessory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("cost", models.IntegerField(default=0)),
                (
                    "fighter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentfighter",
                    ),
                ),
                (
                    "weapon_accessory",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentweaponaccessory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Equipment List Weapon Accessory",
                "verbose_name_plural": "Equipment List Weapon Accessories",
                "ordering": ["fighter__type", "weapon_accessory__name"],
                "unique_together": {("fighter", "weapon_accessory")},
            },
        ),
        migrations.CreateModel(
            name="HistoricalContentWeaponAccessory",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(db_index=True, max_length=255)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "cost",
                    models.IntegerField(
                        default=0,
                        help_text="The credit cost of the weapon accessory at the Trading Post. This cost can be overridden by the fighter's equipment list.",
                    ),
                ),
                (
                    "rarity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("R", "Rare (R)"),
                            ("I", "Illegal (I)"),
                            ("E", "Exclusive (E)"),
                            ("C", "Common (C)"),
                        ],
                        default="C",
                        help_text="Use 'E' to exclude this profile from the Trading Post.",
                        max_length=1,
                        verbose_name="Availability",
                    ),
                ),
                (
                    "rarity_roll",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Availability Level"
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Weapon Accessory",
                "verbose_name_plural": "historical Weapon Accessories",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AlterModelOptions(
            name="contentfighter",
            options={"verbose_name": "Fighter", "verbose_name_plural": "Fighters"},
        ),
        migrations.AddField(
            model_name="contenthouse",
            name="generic",
            field=models.BooleanField(
                default=False,
                help_text="If checked, fighters in this House can join lists and gangs of any other House.",
            ),
        ),
        migrations.CreateModel(
            name="ContentEquipmentFighterProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_fighter",
                    models.ForeignKey(
                        help_text="This type of Fighter will be created when this Equipment is assigned",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentfighter",
                        verbose_name="Fighter",
                    ),
                ),
                (
                    "equipment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentequipment",
                        verbose_name="Equipment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Equipment-Fighter Link",
                "verbose_name_plural": "Equipment-Fighter Links",
                "unique_together": {("equipment", "content_fighter")},
            },
        ),
        migrations.CreateModel(
            name="HistoricalContentEquipmentFighterProfile",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "content_fighter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="This type of Fighter will be created when this Equipment is assigned",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentfighter",
                        verbose_name="Fighter",
                    ),
                ),
                (
                    "equipment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentequipment",
                        verbose_name="Equipment",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Equipment-Fighter Link",
                "verbose_name_plural": "historical Equipment-Fighter Links",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ContentFighterHouseOverride",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "cost",
                    models.IntegerField(
                        blank=True,
                        help_text="What should this Fighter cost when added to this House?",
                        null=True,
                    ),
                ),
                (
                    "fighter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="house_overrides",
                        to="content.contentfighter",
                    ),
                ),
                (
                    "house",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fighter_overrides",
                        to="content.contenthouse",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fighter-House Override",
                "verbose_name_plural": "Fighter-House Overrides",
                "ordering": ["house__name", "fighter__type"],
                "unique_together": {("fighter", "house")},
            },
        ),
        migrations.AddField(
            model_name="contenthouse",
            name="house_additional_rules_name",
            field=models.CharField(
                blank=True,
                help_text="If applicable, the name of the unique additional rules for this house (e.g. Legendary Name).",
                max_length=255,
                null=True,
                verbose_name="House Additional Rules Type",
            ),
        ),
        migrations.CreateModel(
            name="ContentHouseAdditionalRuleTree",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "house",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="house_additional_rule_trees",
                        to="content.contenthouse",
                    ),
                ),
            ],
            options={
                "verbose_name": "House Additional Rule Tree",
                "verbose_name_plural": "House Additional Rule Trees",
                "ordering": ["house__name", "name"],
            },
        ),
        migrations.CreateModel(
            name="ContentHouseAdditionalRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "tree",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rules",
                        to="content.contenthouseadditionalruletree",
                    ),
                ),
            ],
            options={
                "verbose_name": "House Additional Rule",
                "verbose_name_plural": "House Additional Rules",
                "ordering": ["tree__house__name", "tree__name", "name"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalContentHouseAdditionalRule",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(max_length=255)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tree",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contenthouseadditionalruletree",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical House Additional Rule",
                "verbose_name_plural": "historical House Additional Rules",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalContentHouseAdditionalRuleTree",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(max_length=255)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "house",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contenthouse",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical House Additional Rule Tree",
                "verbose_name_plural": "historical House Additional Rule Trees",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalContentWeaponProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Leave blank if the profile has no name (i.e. is the default statline). Don't include the hyphen for named profiles.",
                        max_length=255,
                    ),
                ),
                (
                    "range_short",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Rng S"
                    ),
                ),
                (
                    "range_long",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Rng L"
                    ),
                ),
                (
                    "accuracy_short",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Acc S"
                    ),
                ),
                (
                    "accuracy_long",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Acc L"
                    ),
                ),
                (
                    "strength",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Str"
                    ),
                ),
                (
                    "armour_piercing",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Ap"
                    ),
                ),
                (
                    "damage",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="D"
                    ),
                ),
                (
                    "ammo",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Am"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "cost",
                    models.IntegerField(
                        default=0,
                        help_text="The credit cost of the weapon profile at the Trading Post. If the cost is zero, then the profile is free to use and standard. This cost can be overridden by the fighter's equipment list.",
                    ),
                ),
                (
                    "equipment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentequipment",
                    ),
                ),
                (
                    "rarity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("R", "Rare (R)"),
                            ("I", "Illegal (I)"),
                            ("E", "Exclusive (E)"),
                            ("C", "Common (C)"),
                        ],
                        default="C",
                        help_text="Use 'E' to exclude this profile from the Trading Post.",
                        max_length=1,
                        verbose_name="Availability",
                    ),
                ),
                (
                    "rarity_roll",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Availability Level"
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Weapon Profile",
                "verbose_name_plural": "historical Weapon Profiles",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ContentPsykerDiscipline",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "generic",
                    models.BooleanField(
                        default=False,
                        help_text="If checked, this discipline can be used by any psyker.",
                    ),
                ),
            ],
            options={
                "verbose_name": "Psyker Discipline",
                "verbose_name_plural": "Psyker Disciplines",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalContentSkillCategory",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(db_index=True, max_length=255)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "restricted",
                    models.BooleanField(
                        default=False,
                        help_text="If checked, this skill tree is only available to specific gangs.",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Skill Tree",
                "verbose_name_plural": "historical Skill Trees",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AlterUniqueTogether(
            name="contentskill",
            unique_together={("name", "category")},
        ),
        migrations.CreateModel(
            name="HistoricalContentFighterPsykerDisciplineAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "discipline",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentpsykerdiscipline",
                    ),
                ),
                (
                    "fighter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentfighter",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Fighter Psyker Discipline",
                "verbose_name_plural": "historical Fighter Psyker Disciplines",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalContentPsykerDiscipline",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(db_index=True, max_length=255)),
                (
                    "generic",
                    models.BooleanField(
                        default=False,
                        help_text="If checked, this discipline can be used by any psyker.",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Psyker Discipline",
                "verbose_name_plural": "historical Psyker Disciplines",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalContentPsykerPower",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(max_length=255)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "discipline",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentpsykerdiscipline",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Psyker Power",
                "verbose_name_plural": "historical Psyker Powers",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ContentFighterPsykerDisciplineAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "fighter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="psyker_disciplines",
                        to="content.contentfighter",
                    ),
                ),
                (
                    "discipline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fighter_assignments",
                        to="content.contentpsykerdiscipline",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fighter Psyker Discipline",
                "verbose_name_plural": "Fighter Psyker Disciplines",
                "ordering": ["fighter__type", "discipline__name"],
                "unique_together": {("fighter", "discipline")},
            },
        ),
        migrations.CreateModel(
            name="ContentPsykerPower",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "discipline",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="powers",
                        to="content.contentpsykerdiscipline",
                    ),
                ),
            ],
            options={
                "verbose_name": "Psyker Power",
                "verbose_name_plural": "Psyker Powers",
                "ordering": ["discipline__name", "name"],
                "unique_together": {("name", "discipline")},
            },
        ),
        migrations.CreateModel(
            name="ContentMod",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Modification",
                "verbose_name_plural": "Modifications",
            },
        ),
        migrations.CreateModel(
            name="ContentFighterDefaultAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "cost",
                    models.IntegerField(
                        default=0, help_text="You typically should not overwrite this."
                    ),
                ),
                (
                    "equipment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentequipment",
                    ),
                ),
                (
                    "fighter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="default_assignments",
                        to="content.contentfighter",
                    ),
                ),
                (
                    "weapon_profiles_field",
                    models.ManyToManyField(
                        blank=True, to="content.contentweaponprofile"
                    ),
                ),
                (
                    "weapon_accessories_field",
                    models.ManyToManyField(
                        blank=True, to="content.contentweaponaccessory"
                    ),
                ),
            ],
            options={
                "verbose_name": "Default Equipment Assignment",
                "verbose_name_plural": "Default Equipment Assignments",
                "ordering": ["fighter__type", "equipment__name"],
                "unique_together": set(),
            },
        ),
        migrations.CreateModel(
            name="ContentFighterPsykerPowerDefaultAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "fighter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="default_psyker_powers",
                        to="content.contentfighter",
                    ),
                ),
                (
                    "psyker_power",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fighter_assignments",
                        to="content.contentpsykerpower",
                    ),
                ),
            ],
            options={
                "verbose_name": "Psyker Fighter-Power Default Assignment",
                "verbose_name_plural": "Psyker Fighter-Power Default Assignments",
                "ordering": ["fighter__type", "psyker_power__name"],
                "unique_together": {("fighter", "psyker_power")},
            },
        ),
        migrations.CreateModel(
            name="HistoricalContentFighterDefaultAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                (
                    "cost",
                    models.IntegerField(
                        default=0, help_text="You typically should not overwrite this."
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "equipment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentequipment",
                    ),
                ),
                (
                    "fighter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentfighter",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Default Equipment Assignment",
                "verbose_name_plural": "historical Default Equipment Assignments",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalContentFighterPsykerPowerDefaultAssignment",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "fighter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentfighter",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "psyker_power",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentpsykerpower",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Psyker Fighter-Power Default Assignment",
                "verbose_name_plural": "historical Psyker Fighter-Power Default Assignments",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalContentMod",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Modification",
                "verbose_name_plural": "historical Modifications",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="contentweaponaccessory",
            name="modifiers",
            field=models.ManyToManyField(
                blank=True,
                help_text="Modifiers to apply to the weapon's statline and traits.",
                to="content.contentmod",
            ),
        ),
        migrations.CreateModel(
            name="ContentEquipmentCategory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "group",
                    models.CharField(
                        choices=[
                            ("Gear", "Gear"),
                            ("Vehicle & Mount", "Vehicle & Mount"),
                            ("Weapons & Ammo", "Weapons & Ammo"),
                            ("Other", "Other"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "restricted_to",
                    models.ManyToManyField(
                        blank=True,
                        help_text="If provided, this equipment category is only available to specific gang houses.",
                        related_name="restricted_equipment_categories",
                        to="content.contenthouse",
                        verbose_name="Restricted To",
                    ),
                ),
                (
                    "visible_only_if_in_equipment_list",
                    models.BooleanField(
                        default=False,
                        help_text="If True, this category will only be visible on fighter cards if the fighter has equipment in this category in their equipment list.",
                    ),
                ),
            ],
            options={
                "verbose_name": "Equipment Category",
                "verbose_name_plural": "Equipment Categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalContentFighterEquipmentListItem",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("cost", models.IntegerField(default=0)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "equipment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentequipment",
                    ),
                ),
                (
                    "fighter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentfighter",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "weapon_profile",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The weapon profile to use for this equipment list item.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentweaponprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Equipment List Item",
                "verbose_name_plural": "historical Equipment List Items",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="contentequipment",
            name="category_obj",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="equipment",
                to="content.contentequipmentcategory",
            ),
        ),
        migrations.CreateModel(
            name="ContentFighterEquipmentListItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("cost", models.IntegerField(default=0)),
                (
                    "equipment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentequipment",
                    ),
                ),
                (
                    "fighter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentfighter",
                    ),
                ),
                (
                    "weapon_profile",
                    models.ForeignKey(
                        blank=True,
                        help_text="The weapon profile to use for this equipment list item.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentweaponprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Equipment List Item",
                "verbose_name_plural": "Equipment List Items",
                "unique_together": {("fighter", "equipment", "weapon_profile")},
                "ordering": ["fighter__type", "equipment__name"],
            },
        ),
        migrations.AlterField(
            model_name="contentequipment",
            name="category_obj",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="equipment",
                to="content.contentequipmentcategory",
            ),
        ),
        migrations.RemoveField(
            model_name="contentequipment",
            name="category",
        ),
        migrations.RenameField(
            model_name="contentequipment",
            old_name="category_obj",
            new_name="category",
        ),
        migrations.AddField(
            model_name="contentequipment",
            name="upgrade_mode",
            field=models.CharField(
                choices=[("SINGLE", "Single"), ("MULTI", "Multi")],
                default="SINGLE",
                help_text="If applicable, does this equipment have an upgrade stack (single, e.g. cyberteknika) or options (multi, e.g. genesmithing)?",
                max_length=6,
            ),
        ),
        migrations.CreateModel(
            name="HistoricalContentEquipment",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(max_length=255)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "rarity",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("R", "Rare (R)"),
                            ("I", "Illegal (I)"),
                            ("E", "Exclusive (E)"),
                            ("U", "Unique (U)"),
                            ("C", "Common (C)"),
                        ],
                        default="C",
                        help_text="Use 'E' to exclude this equipment from the Trading Post. Use 'U' for equipment that is unique to a fighter.",
                        max_length=1,
                        verbose_name="Availability",
                    ),
                ),
                (
                    "rarity_roll",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Availability Level"
                    ),
                ),
                (
                    "cost",
                    models.CharField(
                        blank=True,
                        help_text="The credit cost of the equipment at the Trading Post. Note that, in weapons, this is overridden by the 'Standard' weapon profile cost.",
                    ),
                ),
                (
                    "upgrade_stack_name",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="If applicable, the name of the stack of upgrades for this equipment (e.g. Upgrade or Augmentation). Use the singular form.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentequipmentcategory",
                    ),
                ),
                (
                    "upgrade_mode",
                    models.CharField(
                        choices=[("SINGLE", "Single"), ("MULTI", "Multi")],
                        default="SINGLE",
                        help_text="If applicable, does this equipment have an upgrade stack (single, e.g. cyberteknika) or options (multi, e.g. genesmithing)?",
                        max_length=6,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Equipment",
                "verbose_name_plural": "historical Equipment",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalContentEquipmentUpgrade",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(max_length=255)),
                (
                    "position",
                    models.IntegerField(
                        default=0,
                        help_text="The position in which this upgrade sits in the stack, if applicable.",
                    ),
                ),
                (
                    "cost",
                    models.IntegerField(
                        default=0,
                        help_text="The credit cost of the equipment upgrade. Costs are cumulative based on position.",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "equipment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentequipment",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Equipment Upgrade",
                "verbose_name_plural": "historical Equipment Upgrades",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ContentModStat",
            fields=[
                (
                    "contentmod_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="content.contentmod",
                    ),
                ),
                (
                    "stat",
                    models.CharField(
                        choices=[
                            ("strength", "Strength"),
                            ("range_short", "Range (Short)"),
                            ("range_long", "Range (Long)"),
                            ("accuracy_short", "Accuracy (Short)"),
                            ("accuracy_long", "Accuracy (Long)"),
                            ("armour_piercing", "Armour Piercing"),
                            ("damage", "Damage"),
                            ("ammo", "Ammo"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "mode",
                    models.CharField(
                        choices=[
                            ("improve", "Improve"),
                            ("worsen", "Worsen"),
                            ("set", "Set"),
                        ],
                        max_length=10,
                    ),
                ),
                ("value", models.CharField(max_length=5)),
            ],
            options={
                "verbose_name": "Weapon Stat Modifier",
                "verbose_name_plural": "Weapon Stat Modifiers",
                "ordering": ["stat"],
            },
            bases=("content.contentmod",),
        ),
        migrations.CreateModel(
            name="ContentEquipmentUpgrade",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "position",
                    models.IntegerField(
                        default=0,
                        help_text="The position in which this upgrade sits in the stack, if applicable.",
                    ),
                ),
                (
                    "cost",
                    models.IntegerField(
                        default=0,
                        help_text="The credit cost of the equipment upgrade. Costs are cumulative based on position.",
                    ),
                ),
                (
                    "equipment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="upgrades",
                        to="content.contentequipment",
                    ),
                ),
                (
                    "modifiers",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Modifiers to apply to the equipment or fighter's statline and traits.",
                        to="content.contentmod",
                    ),
                ),
            ],
            options={
                "verbose_name": "Equipment Upgrade",
                "verbose_name_plural": "Equipment Upgrades",
                "ordering": ["equipment__name", "name"],
                "unique_together": {("equipment", "name")},
            },
        ),
        migrations.CreateModel(
            name="ContentModFighterRule",
            fields=[
                (
                    "contentmod_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="content.contentmod",
                    ),
                ),
                (
                    "mode",
                    models.CharField(
                        choices=[("add", "Add"), ("remove", "Remove")], max_length=255
                    ),
                ),
                (
                    "rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modified_by",
                        to="content.contentrule",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fighter Rule Modifier",
                "verbose_name_plural": "Fighter Rule Modifiers",
                "ordering": ["rule__name", "mode"],
            },
            bases=("content.contentmod",),
        ),
        migrations.CreateModel(
            name="ContentModFighterStat",
            fields=[
                (
                    "contentmod_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="content.contentmod",
                    ),
                ),
                (
                    "stat",
                    models.CharField(
                        choices=[
                            ("movement", "Movement"),
                            ("weapon_skill", "Weapon Skill"),
                            ("ballistic_skill", "Ballistic Skill"),
                            ("strength", "Strength"),
                            ("toughness", "Toughness"),
                            ("wounds", "Wounds"),
                            ("initiative", "Initiative"),
                            ("attacks", "Attacks"),
                            ("leadership", "Leadership"),
                            ("cool", "Cool"),
                            ("willpower", "Willpower"),
                            ("intelligence", "Intelligence"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "mode",
                    models.CharField(
                        choices=[
                            ("improve", "Improve"),
                            ("worsen", "Worsen"),
                            ("set", "Set"),
                        ],
                        max_length=10,
                    ),
                ),
                ("value", models.CharField(max_length=5)),
            ],
            options={
                "verbose_name": "Fighter Stat Modifier",
                "verbose_name_plural": "Fighter Stat Modifiers",
                "ordering": ["stat"],
            },
            bases=(
                "content.contentmod",
                gyrinx.content.models.ContentModStatApplyMixin,
            ),
        ),
        migrations.CreateModel(
            name="ContentModTrait",
            fields=[
                (
                    "contentmod_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="content.contentmod",
                    ),
                ),
                (
                    "mode",
                    models.CharField(
                        choices=[("add", "Add"), ("remove", "Remove")], max_length=255
                    ),
                ),
                (
                    "trait",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modified_by",
                        to="content.contentweapontrait",
                    ),
                ),
            ],
            options={
                "verbose_name": "Weapon Trait Modifier",
                "verbose_name_plural": "Weapon Trait Modifiers",
                "ordering": ["trait__name", "mode"],
            },
            bases=("content.contentmod",),
        ),
        migrations.AddField(
            model_name="contentequipment",
            name="modifiers",
            field=models.ManyToManyField(
                blank=True,
                help_text="Modifiers to apply to the fighter's statline and traits.",
                to="content.contentmod",
            ),
        ),
        migrations.CreateModel(
            name="ContentModFighterSkill",
            fields=[
                (
                    "contentmod_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="content.contentmod",
                    ),
                ),
                (
                    "mode",
                    models.CharField(
                        choices=[("add", "Add"), ("remove", "Remove")], max_length=255
                    ),
                ),
                (
                    "skill",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modified_by",
                        to="content.contentskill",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fighter Skill Modifier",
                "verbose_name_plural": "Fighter Skill Modifiers",
                "ordering": ["skill__name", "mode"],
            },
            bases=("content.contentmod",),
        ),
        migrations.CreateModel(
            name="HistoricalContentEquipmentEquipmentProfile",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "equipment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentequipment",
                        verbose_name="Equipment",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "linked_equipment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="This Equipment will be auto-assigned when the main Equipment is assigned",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentequipment",
                        verbose_name="Auto-assigned Equipment",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Equipment-Equipment Link",
                "verbose_name_plural": "historical Equipment-Equipment Links",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ContentEquipmentEquipmentProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "equipment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentequipment",
                        verbose_name="Equipment",
                    ),
                ),
                (
                    "linked_equipment",
                    models.ForeignKey(
                        help_text="This Equipment will be auto-assigned when the main Equipment is assigned",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="equip_equip_link_profiles",
                        to="content.contentequipment",
                        verbose_name="Auto-assigned Equipment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Equipment-Equipment Link",
                "verbose_name_plural": "Equipment-Equipment Links",
                "unique_together": {("equipment", "linked_equipment")},
            },
        ),
        migrations.AddField(
            model_name="contentfighter",
            name="can_take_legacy",
            field=models.BooleanField(
                default=False,
                help_text="If checked, list fighters of this type can take on legacy content fighters.",
            ),
        ),
        migrations.AddField(
            model_name="contentfighter",
            name="can_be_legacy",
            field=models.BooleanField(
                default=False,
                help_text="If checked, this fighter can be assigned as a legacy content fighter.",
            ),
        ),
        migrations.CreateModel(
            name="HistoricalContentBook",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(max_length=255)),
                ("shortname", models.CharField(blank=True, max_length=50)),
                ("year", models.CharField(blank=True)),
                ("description", models.TextField(blank=True)),
                ("type", models.CharField(blank=True, max_length=50)),
                ("obsolete", models.BooleanField(default=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Book",
                "verbose_name_plural": "historical Books",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ContentPolicy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("rules", models.JSONField()),
                (
                    "fighter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentfighter",
                    ),
                ),
            ],
            options={
                "verbose_name": "Policy",
                "verbose_name_plural": "Policies",
            },
        ),
        migrations.CreateModel(
            name="HistoricalContentInjury",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(db_index=True, max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "phase",
                    models.CharField(
                        choices=[
                            ("no_change", "No Change"),
                            ("active", "Active"),
                            ("recovery", "Recovery"),
                            ("convalescence", "Convalescence"),
                            ("dead", "Dead"),
                        ],
                        default="no_change",
                        help_text="The default fighter state outcome when this injury is applied.",
                        max_length=20,
                        verbose_name="Default Outcome",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "group",
                    models.CharField(
                        blank=True,
                        help_text="Optional grouping for organizing injuries in selection dropdowns.",
                        max_length=100,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Injury",
                "verbose_name_plural": "historical Injuries",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ContentInjury",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "phase",
                    models.CharField(
                        choices=[
                            ("no_change", "No Change"),
                            ("active", "Active"),
                            ("recovery", "Recovery"),
                            ("convalescence", "Convalescence"),
                            ("dead", "Dead"),
                        ],
                        default="no_change",
                        help_text="The default fighter state outcome when this injury is applied.",
                        max_length=20,
                        verbose_name="Default Outcome",
                    ),
                ),
                (
                    "modifiers",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Modifiers applied when this injury is active.",
                        related_name="injuries",
                        to="content.contentmod",
                    ),
                ),
                (
                    "group",
                    models.CharField(
                        blank=True,
                        help_text="Optional grouping for organizing injuries in selection dropdowns.",
                        max_length=100,
                    ),
                ),
            ],
            options={
                "verbose_name": "Injury",
                "verbose_name_plural": "Injuries",
                "ordering": ["group", "name"],
            },
        ),
        migrations.AddField(
            model_name="contentfighter",
            name="is_stash",
            field=models.BooleanField(
                default=False,
                help_text="If checked, this fighter represents a gang's stash and should only show gear/weapons.",
            ),
        ),
        migrations.AlterField(
            model_name="contentfighter",
            name="category",
            field=models.CharField(
                choices=[
                    ("LEADER", "Leader"),
                    ("CHAMPION", "Champion"),
                    ("GANGER", "Ganger"),
                    ("JUVE", "Juve"),
                    ("CREW", "Crew"),
                    ("EXOTIC_BEAST", "Exotic Beast"),
                    ("HANGER_ON", "Hanger-on"),
                    ("BRUTE", "Brute"),
                    ("HIRED_GUN", "Hired Gun"),
                    ("BOUNTY_HUNTER", "Bounty Hunter"),
                    ("HOUSE_AGENT", "House Agent"),
                    ("HIVE_SCUM", "Hive Scum"),
                    ("DRAMATIS_PERSONAE", "Dramatis Personae"),
                    ("PROSPECT", "Prospect"),
                    ("SPECIALIST", "Specialist"),
                    ("STASH", "Stash"),
                ],
                max_length=255,
            ),
        ),
        migrations.CreateModel(
            name="HistoricalContentFighter",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("type", models.CharField(max_length=255)),
                ("base_cost", models.IntegerField(default=0)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("LEADER", "Leader"),
                            ("CHAMPION", "Champion"),
                            ("GANGER", "Ganger"),
                            ("JUVE", "Juve"),
                            ("CREW", "Crew"),
                            ("EXOTIC_BEAST", "Exotic Beast"),
                            ("HANGER_ON", "Hanger-on"),
                            ("BRUTE", "Brute"),
                            ("HIRED_GUN", "Hired Gun"),
                            ("BOUNTY_HUNTER", "Bounty Hunter"),
                            ("HOUSE_AGENT", "House Agent"),
                            ("HIVE_SCUM", "Hive Scum"),
                            ("DRAMATIS_PERSONAE", "Dramatis Personae"),
                            ("PROSPECT", "Prospect"),
                            ("SPECIALIST", "Specialist"),
                            ("STASH", "Stash"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "house",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contenthouse",
                    ),
                ),
                (
                    "attacks",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="A"
                    ),
                ),
                (
                    "ballistic_skill",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="BS"
                    ),
                ),
                (
                    "cool",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Cl"
                    ),
                ),
                (
                    "initiative",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="I"
                    ),
                ),
                (
                    "intelligence",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Int"
                    ),
                ),
                (
                    "leadership",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Ld"
                    ),
                ),
                (
                    "movement",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="M"
                    ),
                ),
                (
                    "strength",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="S"
                    ),
                ),
                (
                    "toughness",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="T"
                    ),
                ),
                (
                    "weapon_skill",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="WS"
                    ),
                ),
                (
                    "willpower",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="Wil"
                    ),
                ),
                (
                    "wounds",
                    models.CharField(
                        blank=True, default="", max_length=12, verbose_name="W"
                    ),
                ),
                (
                    "can_take_legacy",
                    models.BooleanField(
                        default=False,
                        help_text="If checked, list fighters of this type can take on legacy content fighters.",
                    ),
                ),
                (
                    "can_be_legacy",
                    models.BooleanField(
                        default=False,
                        help_text="If checked, this fighter can be assigned as a legacy content fighter.",
                    ),
                ),
                (
                    "is_stash",
                    models.BooleanField(
                        default=False,
                        help_text="If checked, this fighter represents a gang's stash and should only show gear/weapons.",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Fighter",
                "verbose_name_plural": "historical Fighters",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ContentPack",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, default="")),
                (
                    "color",
                    models.CharField(
                        default="#000000",
                        help_text="Hex color code for UI theming",
                        max_length=7,
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this content pack is publicly visible",
                    ),
                ),
                (
                    "equipment",
                    models.ManyToManyField(
                        blank=True,
                        related_name="content_packs",
                        to="content.contentequipment",
                    ),
                ),
                (
                    "fighters",
                    models.ManyToManyField(
                        blank=True,
                        related_name="content_packs",
                        to="content.contentfighter",
                    ),
                ),
                (
                    "houses",
                    models.ManyToManyField(
                        blank=True,
                        related_name="content_packs",
                        to="content.contenthouse",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "rules",
                    models.ManyToManyField(
                        blank=True,
                        related_name="content_packs",
                        to="content.contentrule",
                    ),
                ),
                (
                    "skill_categories",
                    models.ManyToManyField(
                        blank=True,
                        related_name="content_packs",
                        to="content.contentskillcategory",
                    ),
                ),
                (
                    "weapon_accessories",
                    models.ManyToManyField(
                        blank=True,
                        related_name="content_packs",
                        to="content.contentweaponaccessory",
                    ),
                ),
                (
                    "weapon_profiles",
                    models.ManyToManyField(
                        blank=True,
                        related_name="content_packs",
                        to="content.contentweaponprofile",
                    ),
                ),
                (
                    "weapon_traits",
                    models.ManyToManyField(
                        blank=True,
                        related_name="content_packs",
                        to="content.contentweapontrait",
                    ),
                ),
            ],
            options={
                "verbose_name": "Content Pack",
                "verbose_name_plural": "Content Packs",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalContentPack",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, default="")),
                (
                    "color",
                    models.CharField(
                        default="#000000",
                        help_text="Hex color code for UI theming",
                        max_length=7,
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this content pack is publicly visible",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Content Pack",
                "verbose_name_plural": "historical Content Packs",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalContentFighterEquipmentListUpgrade",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("cost", models.IntegerField(default=0)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "fighter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentfighter",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "upgrade",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentequipmentupgrade",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Equipment List Upgrade",
                "verbose_name_plural": "historical Equipment List Upgrades",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ContentFighterEquipmentListUpgrade",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("cost", models.IntegerField(default=0)),
                (
                    "fighter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentfighter",
                    ),
                ),
                (
                    "upgrade",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentequipmentupgrade",
                    ),
                ),
            ],
            options={
                "verbose_name": "Equipment List Upgrade",
                "verbose_name_plural": "Equipment List Upgrades",
                "ordering": [
                    "fighter__type",
                    "upgrade__equipment__name",
                    "upgrade__name",
                ],
                "unique_together": {("fighter", "upgrade")},
            },
        ),
        migrations.CreateModel(
            name="ContentAttribute",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="The name of the attribute (e.g., 'Alignment', 'Alliance', 'Affiliation').",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "is_single_select",
                    models.BooleanField(
                        default=True,
                        help_text="If True, only one value can be selected. If False, multiple values can be selected.",
                    ),
                ),
                (
                    "restricted_to",
                    models.ManyToManyField(
                        blank=True,
                        help_text="If provided, this attribute is only available to specific gang houses.",
                        related_name="restricted_attributes",
                        to="content.contenthouse",
                        verbose_name="Restricted To",
                    ),
                ),
            ],
            options={
                "verbose_name": "Gang Attribute",
                "verbose_name_plural": "Gang Attributes",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalContentAttribute",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="The name of the attribute (e.g., 'Alignment', 'Alliance', 'Affiliation').",
                        max_length=255,
                    ),
                ),
                (
                    "is_single_select",
                    models.BooleanField(
                        default=True,
                        help_text="If True, only one value can be selected. If False, multiple values can be selected.",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Gang Attribute",
                "verbose_name_plural": "historical Gang Attributes",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalContentAttributeValue",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                (
                    "name",
                    models.CharField(
                        help_text="The value name (e.g., 'Law Abiding', 'Outlaw', 'Chaos Cult').",
                        max_length=255,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="Optional description of what this value represents.",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "attribute",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The attribute this value belongs to.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentattribute",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Gang Attribute Value",
                "verbose_name_plural": "historical Gang Attribute Values",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ContentAttributeValue",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="The value name (e.g., 'Law Abiding', 'Outlaw', 'Chaos Cult').",
                        max_length=255,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        default="",
                        help_text="Optional description of what this value represents.",
                    ),
                ),
                (
                    "attribute",
                    models.ForeignKey(
                        help_text="The attribute this value belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="values",
                        to="content.contentattribute",
                    ),
                ),
            ],
            options={
                "verbose_name": "Gang Attribute Value",
                "verbose_name_plural": "Gang Attribute Values",
                "ordering": ["attribute__name", "name"],
                "unique_together": {("attribute", "name")},
            },
        ),
        migrations.AddField(
            model_name="contenthouse",
            name="legacy",
            field=models.BooleanField(
                default=False,
                help_text="If checked, this House is considered a legacy/older faction.",
            ),
        ),
        migrations.CreateModel(
            name="HistoricalContentHouse",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(max_length=255)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "generic",
                    models.BooleanField(
                        default=False,
                        help_text="If checked, fighters in this House can join lists and gangs of any other House.",
                    ),
                ),
                (
                    "house_additional_rules_name",
                    models.CharField(
                        blank=True,
                        help_text="If applicable, the name of the unique additional rules for this house (e.g. Legendary Name).",
                        max_length=255,
                        null=True,
                        verbose_name="House Additional Rules Type",
                    ),
                ),
                (
                    "legacy",
                    models.BooleanField(
                        default=False,
                        help_text="If checked, this House is considered a legacy/older faction.",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical House",
                "verbose_name_plural": "historical Houses",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalContentEquipmentCategory",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(db_index=True, max_length=255)),
                (
                    "group",
                    models.CharField(
                        choices=[
                            ("Gear", "Gear"),
                            ("Vehicle & Mount", "Vehicle & Mount"),
                            ("Weapons & Ammo", "Weapons & Ammo"),
                            ("Other", "Other"),
                        ],
                        max_length=255,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "visible_only_if_in_equipment_list",
                    models.BooleanField(
                        default=False,
                        help_text="If True, this category will only be visible on fighter cards if the fighter has equipment in this category in their equipment list.",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Equipment Category",
                "verbose_name_plural": "historical Equipment Categories",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
