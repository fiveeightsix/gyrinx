# Generated by Django 5.1.2 on 2024-12-05 15:17

import json
import uuid
from pathlib import Path

import django.db.models.deletion
import simple_history.models
from django.conf import settings
from django.db import migrations, models

from gyrinx.content.models import ContentBook as ContentBookModel
from gyrinx.content.models import ContentPageRef as ContentPageRefModel


def add_refs_from_contents(apps, book, contents, parent=None, category=None):
    ContentPageRef: type[ContentPageRefModel] = apps.get_model(
        "content", "ContentPageRef"
    )

    for key, items in contents.items():
        for item in items:
            title = item.get("title")
            page = item.get("page", "")
            cat = key.title() if category is None else category
            description = item.get("description", "")
            if not title:
                continue
            ref = ContentPageRef(
                book=book,
                title=title,
                page=page,
                parent=parent,
                category=cat or "",
                description=description,
            )
            ref.save()
            for inner_k in [
                "skills",
                "tactics",
                "fighters",
                "powers",
                "subsections",
            ]:
                if inner_k in item:
                    add_refs_from_contents(
                        apps, book, {inner_k: item[inner_k]}, ref, cat
                    )
            # Special case for data that is simply a string
            for inner_k in ["special ability"]:
                if inner_k in item:
                    add_refs_from_contents(
                        apps, book, {inner_k: [dict(title=item[inner_k])]}, ref, cat
                    )


def do_import(apps, schema_editor):
    ContentBook: type[ContentBookModel] = apps.get_model("content", "ContentBook")

    root = Path(__file__).parent / "../../../content/exports/pageref"
    pageref_files = list(root.glob("*.json"))

    books = []
    for file in pageref_files:
        with open(file, "r") as f:
            data = json.load(f)
            book = ContentBook(
                name=data.get("name", ""),
                shortname=data.get("shortname", ""),
                year=data.get("year", 0),
                description=data.get("description", ""),
                type=data.get("type", ""),
                obsolete=True if data.get("obsolete", "") == "true" else False,
            )
            book.save()
            books.append((book, data.get("contents", {})))

    for book, contents in books:
        add_refs_from_contents(apps, book, contents)


def reverse_import(apps, schema_editor):
    ContentBook: type[ContentBookModel] = apps.get_model("content", "ContentBook")
    ContentBook.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ("content", "0025_auto_20241203_2049"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ContentBook",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("shortname", models.CharField(blank=True, max_length=50)),
                ("year", models.CharField(blank=True)),
                ("description", models.TextField(blank=True)),
                ("type", models.CharField(blank=True, max_length=50)),
                ("obsolete", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Book",
                "verbose_name_plural": "Books",
                "ordering": ["name"],
            },
        ),
        migrations.AlterModelOptions(
            name="contentequipment",
            options={
                "ordering": ["name"],
                "verbose_name": "Equipment",
                "verbose_name_plural": "Equipment",
            },
        ),
        migrations.AlterModelOptions(
            name="contentfighter",
            options={
                "ordering": ["house__name", "type"],
                "verbose_name": "Fighter",
                "verbose_name_plural": "Fighters",
            },
        ),
        migrations.AlterModelOptions(
            name="contentfighterequipmentlistitem",
            options={
                "ordering": ["fighter__type", "equipment__name"],
                "verbose_name": "Equipment List Item",
                "verbose_name_plural": "Equipment List Items",
            },
        ),
        migrations.AlterModelOptions(
            name="contenthouse",
            options={
                "ordering": ["name"],
                "verbose_name": "House",
                "verbose_name_plural": "Houses",
            },
        ),
        migrations.AlterModelOptions(
            name="contentrule",
            options={
                "ordering": ["name"],
                "verbose_name": "Rule",
                "verbose_name_plural": "Rules",
            },
        ),
        migrations.AlterModelOptions(
            name="contentskill",
            options={
                "ordering": ["name"],
                "verbose_name": "Skill",
                "verbose_name_plural": "Skills",
            },
        ),
        migrations.AlterModelOptions(
            name="contentweaponprofile",
            options={
                "ordering": ["equipment__name", "name"],
                "verbose_name": "Weapon Profile",
                "verbose_name_plural": "Weapon Profiles",
            },
        ),
        migrations.AlterModelOptions(
            name="contentweapontrait",
            options={
                "ordering": ["name"],
                "verbose_name": "Weapon Trait",
                "verbose_name_plural": "Weapon Traits",
            },
        ),
        migrations.CreateModel(
            name="ContentPageRef",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=255)),
                ("page", models.CharField()),
                ("category", models.CharField(blank=True, max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentbook",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="content.contentpageref",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="HistoricalContentBook",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("name", models.CharField(max_length=255)),
                ("shortname", models.CharField(blank=True, max_length=50)),
                ("year", models.CharField(blank=True)),
                ("description", models.TextField(blank=True)),
                ("type", models.CharField(blank=True, max_length=50)),
                ("obsolete", models.BooleanField(default=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Book",
                "verbose_name_plural": "historical Books",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalContentPageRef",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("title", models.CharField(max_length=255)),
                ("page", models.CharField()),
                ("category", models.CharField(blank=True, max_length=255)),
                ("description", models.TextField(blank=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "book",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentbook",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentpageref",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical content page ref",
                "verbose_name_plural": "historical content page refs",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.RunPython(do_import, reverse_import, elidable=True),
    ]
