# Generated by Django 5.2.4 on 2025-07-15 16:08

import uuid

import django.core.validators
import django.db.models.deletion
import simple_history.models
from django.conf import settings
from django.db import migrations, models

import gyrinx.core.models.upload


class Migration(migrations.Migration):
    replaces = [
        ("core", "0001_initial"),
        ("core", "0002_rename_historicalbuild_historicallist_and_more"),
        ("core", "0003_rename_historicalbuildfighter_historicallistfighter_and_more"),
        ("core", "0004_rename_build_historicallistfighter_list_and_more"),
        ("core", "0005_alter_historicallist_options_alter_list_options"),
        ("core", "0006_historicallistfighterequipmentassignment_and_more"),
        (
            "core",
            "0007_historicallistfighterequipmentassignment_weapon_profile_and_more",
        ),
        ("core", "0008_listfighter_skills"),
        ("core", "0009_alter_historicallist_archived_at_and_more"),
        (
            "core",
            "0010_historicallist_public_list_public_squashed_0011_alter_historicallist_public_alter_list_public",
        ),
        ("core", "0012_listfighterequipmentassignment_weapon_profiles_field"),
        (
            "core",
            "0013_alter_historicallistfighterequipmentassignment_weapon_profile_and_more",
        ),
        ("core", "0014_auto_20250101_1547"),
        ("core", "0015_alter_listfighter_options"),
        ("core", "0016_historicallist_narrative_and_more"),
        ("core", "0017_alter_historicallist_narrative_and_more"),
        ("core", "0018_remove_historicallistfighterequipmentassignment_owner_and_more"),
        (
            "core",
            "0019_remove_historicallistfighterequipmentassignment_weapon_profile_and_more",
        ),
        ("core", "0020_listfighterequipmentassignment_weapon_accessories_field"),
        ("core", "0021_alter_listfighter_options"),
        (
            "core",
            "0022_historicallistfighterequipmentassignment_linked_fighter_and_more",
        ),
        (
            "core",
            "0023_alter_historicallistfighterequipmentassignment_content_equipment_and_more",
        ),
        ("core", "0024_listfighter_disabled_default_assignments"),
        (
            "core",
            "0025_historicallistfighterequipmentassignment_cost_override_and_more",
        ),
        ("core", "0026_alter_list_options"),
        (
            "core",
            "0027_historicallistfighterequipmentassignment_from_default_assignment_and_more",
        ),
        ("core", "0028_historicallistfighterequipmentassignment_upgrade_and_more"),
        ("core", "0029_listfighter_additional_rules"),
        ("core", "0030_alter_listfighter_additional_rules"),
        ("core", "0031_historicallistfighter_cost_override_and_more"),
        ("core", "0032_historicallistfighterpsykerpowerassignment_and_more"),
        ("core", "0033_alter_listfighterpsykerpowerassignment_unique_together"),
        (
            "core",
            "0034_alter_historicallistfighterequipmentassignment_cost_override_and_more",
        ),
        (
            "core",
            "0035_historicallistfighterequipmentassignment_total_cost_override_and_more",
        ),
        ("core", "0036_listfighter_disabled_pskyer_default_powers"),
        ("core", "0037_alter_listfighter_equipment"),
        ("core", "0038_listfighterequipmentassignment_upgrades_field"),
        ("core", "0039_auto_20250418_1607"),
        ("core", "0040_historicallistfighter_attacks_override_and_more"),
        ("core", "0041_listfighterequipmentequipmentlink"),
        (
            "core",
            "0042_historicallistfighterequipmentassignment_linked_equipment_parent_and_more",
        ),
        ("core", "0043_delete_listfighterequipmentequipmentlink"),
        ("core", "0044_historicallistfighter_legacy_content_fighter_and_more"),
        ("core", "0045_campaign_historicalcampaign"),
        ("core", "0046_campaign_narrative_campaign_summary_and_more"),
        ("core", "0047_add_lists_to_campaigns"),
        ("core", "0048_add_campaign_action_model"),
        ("core", "0049_add_campaign_status"),
        ("core", "0050_add_list_status_and_campaign_tracking"),
        ("core", "0051_add_campaign_asset_models"),
        ("core", "0052_add_campaign_resource_models"),
        ("core", "0053_add_uploadedfile_model"),
        ("core", "0054_add_theme_color_to_list"),
        ("core", "0055_add_fighter_injuries"),
        ("core", "0056_historicallistfighterinjury_archived_and_more"),
        ("core", "0057_add_unique_constraint_fighter_injury"),
        ("core", "0058_add_fighter_injury_state"),
        ("core", "0059_add_list_to_campaign_action"),
        ("core", "0060_remove_listfighterinjury_unique_fighter_injury"),
        ("core", "0061_add_xp_tracking_to_listfighter"),
        ("core", "0062_add_listfighteradvancement_model"),
        ("core", "0063_add_other_advancement_type"),
        ("core", "0065_add_credit_tracking_to_list"),
        ("core", "0066_add_campaign_budget"),
        ("core", "0067_update_campaign_budget_default"),
        ("core", "0068_alter_campaign_budget_and_more"),
        ("core", "0069_add_missing_database_indexes"),
        ("core", "0070_add_battle_model_and_link_to_campaign_action"),
        ("core", "0071_historicallistattributeassignment_and_more"),
        ("core", "0072_add_missing_database_indexes"),
        ("core", "0073_capturedfighter_historicalcapturedfighter"),
        ("core", "0074_add_event_model"),
        ("core", "0075_add_session_id_to_event"),
        ("core", "0076_alter_event_verb"),
        ("core", "0077_add_field_column_to_event"),
        ("core", "0078_add_fighter_image_save_private_notes"),
        ("core", "0079_alter_event_field"),
        ("core", "0080_alter_historicallistfighter_private_notes_and_more"),
    ]

    initial = True

    dependencies = [
        ("content", "0001_squashed_0116_add_visible_only_if_in_equipment_list"),
        ("content", "__first__"),
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="List",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        max_length=255,
                        validators=[django.core.validators.MinLengthValidator(3)],
                    ),
                ),
                (
                    "content_house",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contenthouse",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "public",
                    models.BooleanField(
                        default=True, help_text="Public lists are visible to all users."
                    ),
                ),
                (
                    "narrative",
                    models.TextField(
                        blank=True,
                        help_text="Narrative description of the gang in this list: their history and how to play them.",
                        verbose_name="about",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("list_building", "List Building"),
                            ("campaign_mode", "Campaign Mode"),
                        ],
                        default="list_building",
                        help_text="Current status of the list.",
                        max_length=20,
                    ),
                ),
                (
                    "original_list",
                    models.ForeignKey(
                        blank=True,
                        help_text="The original list this was cloned from for a campaign.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="campaign_clones",
                        to="core.list",
                    ),
                ),
            ],
            options={
                "verbose_name": "List",
                "verbose_name_plural": "Lists",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ListFighter",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "list",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.list"
                    ),
                ),
                (
                    "content_fighter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentfighter",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "List Fighter",
                "verbose_name_plural": "List Fighters",
            },
        ),
        migrations.CreateModel(
            name="ListFighterEquipmentAssignment",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "content_equipment",
                    models.ForeignKey(
                        help_text="The ContentEquipment that this assignment is linked to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentequipment",
                        verbose_name="Equipment",
                    ),
                ),
                (
                    "list_fighter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.listfighter",
                    ),
                ),
                (
                    "weapon_profiles_field",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select the costed weapon profiles to assign to this equipment. The standard profiles are automatically included in the cost of the equipment.",
                        related_name="weapon_profiles",
                        to="content.contentweaponprofile",
                        verbose_name="weapon profiles",
                    ),
                ),
                (
                    "weapon_accessories_field",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select the weapon accessories to assign to this equipment.",
                        related_name="weapon_accessories",
                        to="content.contentweaponaccessory",
                        verbose_name="weapon accessories",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fighter Equipment Assignment",
                "verbose_name_plural": "Fighter Equipment Assignments",
            },
        ),
        migrations.AddField(
            model_name="listfighter",
            name="equipment",
            field=models.ManyToManyField(
                blank=True,
                through="core.ListFighterEquipmentAssignment",
                to="content.contentequipment",
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="skills",
            field=models.ManyToManyField(blank=True, to="content.contentskill"),
        ),
        migrations.AlterField(
            model_name="listfighter",
            name="archived_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="listfighter",
            name="name",
            field=models.CharField(
                max_length=255,
                validators=[django.core.validators.MinLengthValidator(3)],
            ),
        ),
        migrations.AlterModelOptions(
            name="listfighter",
            options={
                "ordering": [
                    models.Case(
                        models.When(content_fighter__category="LEADER", then=0),
                        models.When(content_fighter__category="CHAMPION", then=1),
                        models.When(content_fighter__category="PROSPECT", then=2),
                        models.When(content_fighter__category="SPECIALIST", then=3),
                        models.When(content_fighter__category="GANGER", then=4),
                        models.When(content_fighter__category="JUVE", then=5),
                        default=99,
                    ),
                    "content_fighter__category",
                    "name",
                ],
                "verbose_name": "List Fighter",
                "verbose_name_plural": "List Fighters",
            },
        ),
        migrations.AddField(
            model_name="listfighter",
            name="narrative",
            field=models.TextField(
                blank=True,
                help_text="Narrative description of the Fighter: their history and how to play them.",
                verbose_name="about",
            ),
        ),
        migrations.AlterModelOptions(
            name="listfighter",
            options={
                "verbose_name": "List Fighter",
                "verbose_name_plural": "List Fighters",
            },
        ),
        migrations.AddField(
            model_name="listfighterequipmentassignment",
            name="linked_fighter",
            field=models.ForeignKey(
                blank=True,
                help_text="The ListFighter that this Equipment assignment is linked to (e.g. Exotic Beast, Vehicle).",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="linked_fighter",
                to="core.listfighter",
            ),
        ),
        migrations.AlterField(
            model_name="listfighterequipmentassignment",
            name="list_fighter",
            field=models.ForeignKey(
                help_text="The ListFighter that this equipment assignment is linked to.",
                on_delete=django.db.models.deletion.CASCADE,
                to="core.listfighter",
                verbose_name="Fighter",
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="disabled_default_assignments",
            field=models.ManyToManyField(
                blank=True, to="content.contentfighterdefaultassignment"
            ),
        ),
        migrations.AddField(
            model_name="listfighterequipmentassignment",
            name="from_default_assignment",
            field=models.ForeignKey(
                blank=True,
                help_text="The default assignment that this equipment assignment was created from",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="content.contentfighterdefaultassignment",
            ),
        ),
        migrations.AddField(
            model_name="listfighterequipmentassignment",
            name="upgrade",
            field=models.ForeignKey(
                blank=True,
                help_text="The upgrade that this equipment assignment is set to.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="content.contentequipmentupgrade",
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="additional_rules",
            field=models.ManyToManyField(
                blank=True,
                help_text="Additional rules for this fighter. Must be from the same house as the fighter.",
                to="content.contenthouseadditionalrule",
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="cost_override",
            field=models.IntegerField(
                blank=True,
                help_text="If set, this will be base cost of this fighter.",
                null=True,
            ),
        ),
        migrations.CreateModel(
            name="HistoricalListFighterPsykerPowerAssignment",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "list_fighter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The ListFighter that this psyker power assignment is linked to.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.listfighter",
                        verbose_name="Fighter",
                    ),
                ),
                (
                    "psyker_power",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The ContentSkill that this assignment is linked to.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentpsykerpower",
                        verbose_name="Psyker Power",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Fighter Psyker Power Assignment",
                "verbose_name_plural": "historical Fighter Psyker Power Assignments",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ListFighterPsykerPowerAssignment",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "list_fighter",
                    models.ForeignKey(
                        help_text="The ListFighter that this psyker power assignment is linked to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="psyker_powers",
                        to="core.listfighter",
                        verbose_name="Fighter",
                    ),
                ),
                (
                    "psyker_power",
                    models.ForeignKey(
                        help_text="The ContentSkill that this assignment is linked to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="list_fighters",
                        to="content.contentpsykerpower",
                        verbose_name="Psyker Power",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fighter Psyker Power Assignment",
                "verbose_name_plural": "Fighter Psyker Power Assignments",
                "unique_together": {("list_fighter", "psyker_power")},
            },
        ),
        migrations.AddField(
            model_name="listfighterequipmentassignment",
            name="cost_override",
            field=models.IntegerField(
                blank=True,
                help_text="If set, this will be the cost of the base equipment of this assignment, ignoring equipment list and trading post costs",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="listfighterequipmentassignment",
            name="total_cost_override",
            field=models.IntegerField(
                blank=True,
                help_text="If set, this will be the total cost of this assignment, ignoring profiles, accessories, and upgrades",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="disabled_pskyer_default_powers",
            field=models.ManyToManyField(
                blank=True, to="content.contentfighterpsykerpowerdefaultassignment"
            ),
        ),
        migrations.AlterField(
            model_name="listfighter",
            name="equipment",
            field=models.ManyToManyField(
                blank=True,
                through="core.ListFighterEquipmentAssignment",
                through_fields=("list_fighter", "content_equipment"),
                to="content.contentequipment",
            ),
        ),
        migrations.AddField(
            model_name="listfighterequipmentassignment",
            name="upgrades_field",
            field=models.ManyToManyField(
                blank=True,
                help_text="The upgrades that this equipment assignment has.",
                related_name="fighter_equipment_assignments",
                to="content.contentequipmentupgrade",
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="attacks_override",
            field=models.CharField(
                blank=True, max_length=12, null=True, verbose_name="A"
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="ballistic_skill_override",
            field=models.CharField(
                blank=True, max_length=12, null=True, verbose_name="BS"
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="cool_override",
            field=models.CharField(
                blank=True, max_length=12, null=True, verbose_name="Cl"
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="initiative_override",
            field=models.CharField(
                blank=True, max_length=12, null=True, verbose_name="I"
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="intelligence_override",
            field=models.CharField(
                blank=True, max_length=12, null=True, verbose_name="Int"
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="leadership_override",
            field=models.CharField(
                blank=True, max_length=12, null=True, verbose_name="Ld"
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="movement_override",
            field=models.CharField(
                blank=True, max_length=12, null=True, verbose_name="M"
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="strength_override",
            field=models.CharField(
                blank=True, max_length=12, null=True, verbose_name="S"
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="toughness_override",
            field=models.CharField(
                blank=True, max_length=12, null=True, verbose_name="T"
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="weapon_skill_override",
            field=models.CharField(
                blank=True, max_length=12, null=True, verbose_name="WS"
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="willpower_override",
            field=models.CharField(
                blank=True, max_length=12, null=True, verbose_name="Wil"
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="wounds_override",
            field=models.CharField(
                blank=True, max_length=12, null=True, verbose_name="W"
            ),
        ),
        migrations.CreateModel(
            name="HistoricalListFighterEquipmentAssignment",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "content_equipment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The ContentEquipment that this assignment is linked to.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentequipment",
                        verbose_name="Equipment",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "list_fighter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The ListFighter that this equipment assignment is linked to.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.listfighter",
                        verbose_name="Fighter",
                    ),
                ),
                (
                    "linked_fighter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The ListFighter that this Equipment assignment is linked to (e.g. Exotic Beast, Vehicle).",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.listfighter",
                    ),
                ),
                (
                    "cost_override",
                    models.IntegerField(
                        blank=True,
                        help_text="If set, this will be the cost of the base equipment of this assignment, ignoring equipment list and trading post costs",
                        null=True,
                    ),
                ),
                (
                    "from_default_assignment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The default assignment that this equipment assignment was created from",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentfighterdefaultassignment",
                    ),
                ),
                (
                    "upgrade",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The upgrade that this equipment assignment is set to.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentequipmentupgrade",
                    ),
                ),
                (
                    "total_cost_override",
                    models.IntegerField(
                        blank=True,
                        help_text="If set, this will be the total cost of this assignment, ignoring profiles, accessories, and upgrades",
                        null=True,
                    ),
                ),
                (
                    "linked_equipment_parent",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The parent equipment assignment that this assignment is linked to.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.listfighterequipmentassignment",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Fighter Equipment Assignment",
                "verbose_name_plural": "historical Fighter Equipment Assignments",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="listfighterequipmentassignment",
            name="linked_equipment_parent",
            field=models.ForeignKey(
                blank=True,
                help_text="The parent equipment assignment that this assignment is linked to.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="linked_equipment_children",
                to="core.listfighterequipmentassignment",
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="legacy_content_fighter",
            field=models.ForeignKey(
                blank=True,
                help_text="This supports a ListFighter having a Content Fighter legacy which provides access to (and costs from) the legacy fighter's equipment list.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="list_fighter_legacy",
                to="content.contentfighter",
            ),
        ),
        migrations.CreateModel(
            name="Campaign",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        max_length=255,
                        validators=[django.core.validators.MinLengthValidator(3)],
                    ),
                ),
                (
                    "public",
                    models.BooleanField(
                        default=True,
                        help_text="Public Campaigns are visible to all users.",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "narrative",
                    models.TextField(
                        blank=True,
                        help_text="A longer narrative of the campaign. This will be displayed on the campaign detail page.",
                    ),
                ),
                (
                    "summary",
                    models.TextField(
                        blank=True,
                        help_text="A short summary of the campaign. This will be displayed on the campaign list page.",
                        validators=[django.core.validators.MaxLengthValidator(300)],
                    ),
                ),
                (
                    "lists",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Lists that are part of this campaign.",
                        related_name="campaigns",
                        to="core.list",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pre_campaign", "Pre-Campaign"),
                            ("in_progress", "In Progress"),
                            ("post_campaign", "Post-Campaign"),
                        ],
                        default="pre_campaign",
                        help_text="Current status of the campaign.",
                        max_length=20,
                    ),
                ),
                (
                    "budget",
                    models.PositiveIntegerField(
                        default=1500,
                        help_text="Starting budget for each gang in credits.",
                    ),
                ),
            ],
            options={
                "verbose_name": "Campaign",
                "verbose_name_plural": "Campaigns",
                "ordering": ["-created"],
            },
        ),
        migrations.AddField(
            model_name="list",
            name="campaign",
            field=models.ForeignKey(
                blank=True,
                help_text="The campaign this list is participating in (if in campaign mode).",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="campaign_lists",
                to="core.campaign",
            ),
        ),
        migrations.CreateModel(
            name="CampaignAssetType",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "name_singular",
                    models.CharField(
                        help_text="Singular form of the asset type name (e.g., 'Territory')",
                        max_length=100,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "name_plural",
                    models.CharField(
                        help_text="Plural form of the asset type name (e.g., 'Territories')",
                        max_length=100,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this asset type"
                    ),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        help_text="The campaign this asset type belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="asset_types",
                        to="core.campaign",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Campaign Asset Type",
                "verbose_name_plural": "Campaign Asset Types",
                "ordering": ["name_singular"],
                "unique_together": {("campaign", "name_singular")},
            },
        ),
        migrations.CreateModel(
            name="CampaignAsset",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the asset (e.g., 'The Sump')",
                        max_length=200,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of this asset"),
                ),
                (
                    "holder",
                    models.ForeignKey(
                        blank=True,
                        help_text="The list currently holding this asset",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="held_assets",
                        to="core.list",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "asset_type",
                    models.ForeignKey(
                        help_text="The type of this asset",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assets",
                        to="core.campaignassettype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Campaign Asset",
                "verbose_name_plural": "Campaign Assets",
                "ordering": ["asset_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalCampaignAsset",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the asset (e.g., 'The Sump')",
                        max_length=200,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of this asset"),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "asset_type",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The type of this asset",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.campaignassettype",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "holder",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The list currently holding this asset",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.list",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Campaign Asset",
                "verbose_name_plural": "historical Campaign Assets",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalCampaignAssetType",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                (
                    "name_singular",
                    models.CharField(
                        help_text="Singular form of the asset type name (e.g., 'Territory')",
                        max_length=100,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "name_plural",
                    models.CharField(
                        help_text="Plural form of the asset type name (e.g., 'Territories')",
                        max_length=100,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this asset type"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The campaign this asset type belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.campaign",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Campaign Asset Type",
                "verbose_name_plural": "historical Campaign Asset Types",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="CampaignResourceType",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the resource (e.g., 'Meat', 'Credits')",
                        max_length=100,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this resource type"
                    ),
                ),
                (
                    "default_amount",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Default amount allocated to each list when campaign starts",
                    ),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        help_text="The campaign this resource type belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resource_types",
                        to="core.campaign",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Campaign Resource Type",
                "verbose_name_plural": "Campaign Resource Types",
                "ordering": ["name"],
                "unique_together": {("campaign", "name")},
            },
        ),
        migrations.CreateModel(
            name="HistoricalCampaignListResource",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                (
                    "amount",
                    models.PositiveIntegerField(
                        default=0, help_text="Current amount of this resource"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The campaign this resource belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.campaign",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "list",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The list that has this resource",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.list",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resource_type",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The type of resource",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.campaignresourcetype",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Campaign List Resource",
                "verbose_name_plural": "historical Campaign List Resources",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalCampaignResourceType",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the resource (e.g., 'Meat', 'Credits')",
                        max_length=100,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this resource type"
                    ),
                ),
                (
                    "default_amount",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Default amount allocated to each list when campaign starts",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The campaign this resource type belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.campaign",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Campaign Resource Type",
                "verbose_name_plural": "historical Campaign Resource Types",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="CampaignListResource",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "amount",
                    models.PositiveIntegerField(
                        default=0, help_text="Current amount of this resource"
                    ),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        help_text="The campaign this resource belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="list_resources",
                        to="core.campaign",
                    ),
                ),
                (
                    "list",
                    models.ForeignKey(
                        help_text="The list that has this resource",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="campaign_resources",
                        to="core.list",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "resource_type",
                    models.ForeignKey(
                        help_text="The type of resource",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="list_resources",
                        to="core.campaignresourcetype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Campaign List Resource",
                "verbose_name_plural": "Campaign List Resources",
                "ordering": ["resource_type__name", "list__name"],
                "unique_together": {("campaign", "resource_type", "list")},
            },
        ),
        migrations.CreateModel(
            name="HistoricalUploadedFile",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("file", models.TextField(max_length=100)),
                ("original_filename", models.CharField(max_length=255)),
                (
                    "file_size",
                    models.PositiveIntegerField(help_text="File size in bytes"),
                ),
                ("content_type", models.CharField(max_length=100)),
                (
                    "uploaded_at",
                    models.DateTimeField(blank=True, db_index=True, editable=False),
                ),
                ("last_accessed", models.DateTimeField(blank=True, null=True)),
                ("access_count", models.PositiveIntegerField(default=0)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical uploaded file",
                "verbose_name_plural": "historical uploaded files",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="UploadedFile",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "file",
                    models.FileField(upload_to=gyrinx.core.models.upload.upload_to),
                ),
                ("original_filename", models.CharField(max_length=255)),
                (
                    "file_size",
                    models.PositiveIntegerField(help_text="File size in bytes"),
                ),
                ("content_type", models.CharField(max_length=100)),
                ("uploaded_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("last_accessed", models.DateTimeField(blank=True, null=True)),
                ("access_count", models.PositiveIntegerField(default=0)),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-uploaded_at"],
                "indexes": [
                    models.Index(
                        fields=["owner", "uploaded_at"],
                        name="core_upload_owner_i_b9b761_idx",
                    ),
                    models.Index(
                        fields=["content_type"], name="core_upload_content_3c1f79_idx"
                    ),
                ],
            },
        ),
        migrations.AddField(
            model_name="list",
            name="theme_color",
            field=models.CharField(
                blank=True,
                default="",
                help_text="Theme color for this gang in hex format (e.g., #FF0000).",
                max_length=7,
                validators=[
                    django.core.validators.RegexValidator(
                        "^#(?:[0-9a-fA-F]{3}){1,2}$|^$",
                        "Enter a valid hex color code (e.g., #FF0000) or leave empty.",
                    )
                ],
            ),
        ),
        migrations.CreateModel(
            name="HistoricalListFighterInjury",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "date_received",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="When this injury was sustained.",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Optional notes about how this injury was received.",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "fighter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The fighter who has sustained this injury.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.listfighter",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "injury",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The specific injury sustained.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentinjury",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("archived", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "historical Fighter Injury",
                "verbose_name_plural": "historical Fighter Injuries",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="injury_state",
            field=models.CharField(
                choices=[
                    ("active", "Active"),
                    ("recovery", "Recovery"),
                    ("convalescence", "Convalescence"),
                    ("dead", "Dead"),
                ],
                default="active",
                help_text="The current injury state of the fighter in campaign mode.",
                max_length=20,
            ),
        ),
        migrations.CreateModel(
            name="CampaignAction",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "description",
                    models.TextField(
                        help_text="Description of the action taken",
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "outcome",
                    models.TextField(
                        blank=True, help_text="Optional outcome or result of the action"
                    ),
                ),
                (
                    "dice_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of D6 dice rolled (0 if no roll)"
                    ),
                ),
                (
                    "dice_results",
                    models.JSONField(
                        blank=True, default=list, help_text="Results of each die rolled"
                    ),
                ),
                (
                    "dice_total",
                    models.PositiveIntegerField(
                        default=0, help_text="Total sum of all dice rolled"
                    ),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        help_text="The campaign this action belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="actions",
                        to="core.campaign",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user who performed this action",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="campaign_actions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "list",
                    models.ForeignKey(
                        blank=True,
                        help_text="The list this action is related to",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="campaign_actions",
                        to="core.list",
                    ),
                ),
            ],
            options={
                "verbose_name": "Campaign Action",
                "verbose_name_plural": "Campaign Actions",
                "ordering": ["-created"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalCampaignAction",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                (
                    "description",
                    models.TextField(
                        help_text="Description of the action taken",
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "outcome",
                    models.TextField(
                        blank=True, help_text="Optional outcome or result of the action"
                    ),
                ),
                (
                    "dice_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of D6 dice rolled (0 if no roll)"
                    ),
                ),
                (
                    "dice_results",
                    models.JSONField(
                        blank=True, default=list, help_text="Results of each die rolled"
                    ),
                ),
                (
                    "dice_total",
                    models.PositiveIntegerField(
                        default=0, help_text="Total sum of all dice rolled"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The campaign this action belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.campaign",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The user who performed this action",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "list",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The list this action is related to",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.list",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Campaign Action",
                "verbose_name_plural": "historical Campaign Actions",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ListFighterInjury",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "date_received",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this injury was sustained."
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Optional notes about how this injury was received.",
                    ),
                ),
                (
                    "fighter",
                    models.ForeignKey(
                        help_text="The fighter who has sustained this injury.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="injuries",
                        to="core.listfighter",
                    ),
                ),
                (
                    "injury",
                    models.ForeignKey(
                        help_text="The specific injury sustained.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentinjury",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("archived", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Fighter Injury",
                "verbose_name_plural": "Fighter Injuries",
                "ordering": ["-date_received"],
                "constraints": [],
            },
        ),
        migrations.CreateModel(
            name="HistoricalListFighter",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                (
                    "name",
                    models.CharField(
                        max_length=255,
                        validators=[django.core.validators.MinLengthValidator(3)],
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "list",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.list",
                    ),
                ),
                (
                    "content_fighter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentfighter",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "narrative",
                    models.TextField(
                        blank=True,
                        help_text="Narrative description of the Fighter: their history and how to play them.",
                        verbose_name="about",
                    ),
                ),
                (
                    "cost_override",
                    models.IntegerField(
                        blank=True,
                        help_text="If set, this will be base cost of this fighter.",
                        null=True,
                    ),
                ),
                (
                    "attacks_override",
                    models.CharField(
                        blank=True, max_length=12, null=True, verbose_name="A"
                    ),
                ),
                (
                    "ballistic_skill_override",
                    models.CharField(
                        blank=True, max_length=12, null=True, verbose_name="BS"
                    ),
                ),
                (
                    "cool_override",
                    models.CharField(
                        blank=True, max_length=12, null=True, verbose_name="Cl"
                    ),
                ),
                (
                    "initiative_override",
                    models.CharField(
                        blank=True, max_length=12, null=True, verbose_name="I"
                    ),
                ),
                (
                    "intelligence_override",
                    models.CharField(
                        blank=True, max_length=12, null=True, verbose_name="Int"
                    ),
                ),
                (
                    "leadership_override",
                    models.CharField(
                        blank=True, max_length=12, null=True, verbose_name="Ld"
                    ),
                ),
                (
                    "movement_override",
                    models.CharField(
                        blank=True, max_length=12, null=True, verbose_name="M"
                    ),
                ),
                (
                    "strength_override",
                    models.CharField(
                        blank=True, max_length=12, null=True, verbose_name="S"
                    ),
                ),
                (
                    "toughness_override",
                    models.CharField(
                        blank=True, max_length=12, null=True, verbose_name="T"
                    ),
                ),
                (
                    "weapon_skill_override",
                    models.CharField(
                        blank=True, max_length=12, null=True, verbose_name="WS"
                    ),
                ),
                (
                    "willpower_override",
                    models.CharField(
                        blank=True, max_length=12, null=True, verbose_name="Wil"
                    ),
                ),
                (
                    "wounds_override",
                    models.CharField(
                        blank=True, max_length=12, null=True, verbose_name="W"
                    ),
                ),
                (
                    "legacy_content_fighter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="This supports a ListFighter having a Content Fighter legacy which provides access to (and costs from) the legacy fighter's equipment list.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentfighter",
                    ),
                ),
                (
                    "injury_state",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("recovery", "Recovery"),
                            ("convalescence", "Convalescence"),
                            ("dead", "Dead"),
                        ],
                        default="active",
                        help_text="The current injury state of the fighter in campaign mode.",
                        max_length=20,
                    ),
                ),
                (
                    "xp_current",
                    models.PositiveIntegerField(
                        default=0, help_text="Current XP available to spend"
                    ),
                ),
                (
                    "xp_total",
                    models.PositiveIntegerField(
                        default=0, help_text="Total XP ever earned"
                    ),
                ),
            ],
            options={
                "verbose_name": "historical List Fighter",
                "verbose_name_plural": "historical List Fighters",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="xp_current",
            field=models.PositiveIntegerField(
                default=0, help_text="Current XP available to spend"
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="xp_total",
            field=models.PositiveIntegerField(
                default=0, help_text="Total XP ever earned"
            ),
        ),
        migrations.CreateModel(
            name="HistoricalListFighterAdvancement",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                (
                    "advancement_type",
                    models.CharField(
                        choices=[
                            ("stat", "Characteristic Increase"),
                            ("skill", "New Skill"),
                            ("other", "Other"),
                        ],
                        help_text="The type of advancement purchased.",
                        max_length=10,
                    ),
                ),
                (
                    "stat_increased",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("movement", "Movement"),
                            ("weapon_skill", "Weapon Skill"),
                            ("ballistic_skill", "Ballistic Skill"),
                            ("strength", "Strength"),
                            ("toughness", "Toughness"),
                            ("wounds", "Wounds"),
                            ("initiative", "Initiative"),
                            ("attacks", "Attacks"),
                            ("leadership", "Leadership"),
                            ("cool", "Cool"),
                            ("willpower", "Willpower"),
                            ("intelligence", "Intelligence"),
                        ],
                        help_text="For stat increases, which characteristic was improved.",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "xp_cost",
                    models.PositiveIntegerField(
                        help_text="The XP cost of this advancement."
                    ),
                ),
                (
                    "cost_increase",
                    models.IntegerField(
                        default=0,
                        help_text="The increase in fighter cost from this advancement.",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "campaign_action",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The campaign action recording the dice roll for this advancement.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.campaignaction",
                    ),
                ),
                (
                    "fighter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The fighter who purchased this advancement.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.listfighter",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "skill",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="For skill advancements, which skill was gained.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentskill",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="For 'other' advancements, a free text description.",
                        max_length=100,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Fighter Advancement",
                "verbose_name_plural": "historical Fighter Advancements",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ListFighterAdvancement",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "advancement_type",
                    models.CharField(
                        choices=[
                            ("stat", "Characteristic Increase"),
                            ("skill", "New Skill"),
                            ("other", "Other"),
                        ],
                        help_text="The type of advancement purchased.",
                        max_length=10,
                    ),
                ),
                (
                    "stat_increased",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("movement", "Movement"),
                            ("weapon_skill", "Weapon Skill"),
                            ("ballistic_skill", "Ballistic Skill"),
                            ("strength", "Strength"),
                            ("toughness", "Toughness"),
                            ("wounds", "Wounds"),
                            ("initiative", "Initiative"),
                            ("attacks", "Attacks"),
                            ("leadership", "Leadership"),
                            ("cool", "Cool"),
                            ("willpower", "Willpower"),
                            ("intelligence", "Intelligence"),
                        ],
                        help_text="For stat increases, which characteristic was improved.",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "xp_cost",
                    models.PositiveIntegerField(
                        help_text="The XP cost of this advancement."
                    ),
                ),
                (
                    "cost_increase",
                    models.IntegerField(
                        default=0,
                        help_text="The increase in fighter cost from this advancement.",
                    ),
                ),
                (
                    "campaign_action",
                    models.OneToOneField(
                        blank=True,
                        help_text="The campaign action recording the dice roll for this advancement.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="advancement",
                        to="core.campaignaction",
                    ),
                ),
                (
                    "fighter",
                    models.ForeignKey(
                        help_text="The fighter who purchased this advancement.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="advancements",
                        to="core.listfighter",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "skill",
                    models.ForeignKey(
                        blank=True,
                        help_text="For skill advancements, which skill was gained.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentskill",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="For 'other' advancements, a free text description.",
                        max_length=100,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Fighter Advancement",
                "verbose_name_plural": "Fighter Advancements",
                "ordering": ["fighter", "created"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalList",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                (
                    "name",
                    models.CharField(
                        max_length=255,
                        validators=[django.core.validators.MinLengthValidator(3)],
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "content_house",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contenthouse",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "public",
                    models.BooleanField(
                        default=True, help_text="Public lists are visible to all users."
                    ),
                ),
                (
                    "narrative",
                    models.TextField(
                        blank=True,
                        help_text="Narrative description of the gang in this list: their history and how to play them.",
                        verbose_name="about",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("list_building", "List Building"),
                            ("campaign_mode", "Campaign Mode"),
                        ],
                        default="list_building",
                        help_text="Current status of the list.",
                        max_length=20,
                    ),
                ),
                (
                    "original_list",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The original list this was cloned from for a campaign.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.list",
                    ),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The campaign this list is participating in (if in campaign mode).",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.campaign",
                    ),
                ),
                (
                    "theme_color",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Theme color for this gang in hex format (e.g., #FF0000).",
                        max_length=7,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^#(?:[0-9a-fA-F]{3}){1,2}$|^$",
                                "Enter a valid hex color code (e.g., #FF0000) or leave empty.",
                            )
                        ],
                    ),
                ),
                (
                    "credits_current",
                    models.PositiveIntegerField(
                        default=0, help_text="Current credits available"
                    ),
                ),
                (
                    "credits_earned",
                    models.PositiveIntegerField(
                        default=0, help_text="Total credits ever earned"
                    ),
                ),
            ],
            options={
                "verbose_name": "historical List",
                "verbose_name_plural": "historical Lists",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="list",
            name="credits_current",
            field=models.PositiveIntegerField(
                default=0, help_text="Current credits available"
            ),
        ),
        migrations.AddField(
            model_name="list",
            name="credits_earned",
            field=models.PositiveIntegerField(
                default=0, help_text="Total credits ever earned"
            ),
        ),
        migrations.CreateModel(
            name="HistoricalCampaign",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                (
                    "name",
                    models.CharField(
                        max_length=255,
                        validators=[django.core.validators.MinLengthValidator(3)],
                    ),
                ),
                (
                    "public",
                    models.BooleanField(
                        default=True,
                        help_text="Public Campaigns are visible to all users.",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "narrative",
                    models.TextField(
                        blank=True,
                        help_text="A longer narrative of the campaign. This will be displayed on the campaign detail page.",
                    ),
                ),
                (
                    "summary",
                    models.TextField(
                        blank=True,
                        help_text="A short summary of the campaign. This will be displayed on the campaign list page.",
                        validators=[django.core.validators.MaxLengthValidator(300)],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pre_campaign", "Pre-Campaign"),
                            ("in_progress", "In Progress"),
                            ("post_campaign", "Post-Campaign"),
                        ],
                        default="pre_campaign",
                        help_text="Current status of the campaign.",
                        max_length=20,
                    ),
                ),
                (
                    "budget",
                    models.PositiveIntegerField(
                        default=1500,
                        help_text="Starting budget for each gang in credits.",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Campaign",
                "verbose_name_plural": "historical Campaigns",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddIndex(
            model_name="listfighter",
            index=models.Index(
                fields=["injury_state"], name="core_listfi_injury__2adf42_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="listfighter",
            index=models.Index(
                fields=["xp_current"], name="core_listfi_xp_curr_9b3e1a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="listfighter",
            index=models.Index(
                fields=["xp_total"], name="core_listfi_xp_tota_c4f892_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="listfighter",
            index=models.Index(
                fields=["list", "archived"], name="core_listfi_list_ar_8e7f3b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="listfighter",
            index=models.Index(
                fields=["list", "injury_state", "archived"],
                name="core_listfi_list_in_4a9c2e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="list",
            index=models.Index(fields=["status"], name="core_list_status_3f8a91_idx"),
        ),
        migrations.AddIndex(
            model_name="campaign",
            index=models.Index(fields=["status"], name="core_campai_status_7e2b43_idx"),
        ),
        migrations.CreateModel(
            name="Battle",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("date", models.DateField(help_text="The date the battle took place")),
                (
                    "mission",
                    models.CharField(
                        help_text="The mission name or type", max_length=200
                    ),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        help_text="The campaign this battle belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="battles",
                        to="core.campaign",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "participants",
                    models.ManyToManyField(
                        help_text="Lists/gangs that participated in the battle",
                        related_name="battles_participated",
                        to="core.list",
                    ),
                ),
                (
                    "winners",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Lists/gangs that won the battle (leave empty for draws)",
                        related_name="battles_won",
                        to="core.list",
                    ),
                ),
            ],
            options={
                "ordering": ["-date", "-created"],
            },
        ),
        migrations.AddField(
            model_name="campaignaction",
            name="battle",
            field=models.ForeignKey(
                blank=True,
                help_text="The battle this action is related to",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="actions",
                to="core.battle",
            ),
        ),
        migrations.AddField(
            model_name="historicalcampaignaction",
            name="battle",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="The battle this action is related to",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="core.battle",
            ),
        ),
        migrations.CreateModel(
            name="BattleNote",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "content",
                    models.TextField(
                        help_text="Note content (supports rich text formatting)"
                    ),
                ),
                (
                    "battle",
                    models.ForeignKey(
                        help_text="The battle this note belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notes",
                        to="core.battle",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["created"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalBattle",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("date", models.DateField(help_text="The date the battle took place")),
                (
                    "mission",
                    models.CharField(
                        help_text="The mission name or type", max_length=200
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "campaign",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The campaign this battle belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.campaign",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical battle",
                "verbose_name_plural": "historical battles",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalBattleNote",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                (
                    "content",
                    models.TextField(
                        help_text="Note content (supports rich text formatting)"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "battle",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The battle this note belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.battle",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical battle note",
                "verbose_name_plural": "historical battle notes",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddIndex(
            model_name="battle",
            index=models.Index(
                fields=["campaign", "date"], name="core_battle_campaig_872846_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="battle",
            index=models.Index(fields=["date"], name="core_battle_date_e8424d_idx"),
        ),
        migrations.AddIndex(
            model_name="battlenote",
            index=models.Index(
                fields=["battle", "created"], name="core_battle_battle__9274ee_idx"
            ),
        ),
        migrations.CreateModel(
            name="HistoricalListAttributeAssignment",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "attribute_value",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The attribute value assigned to the list.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="content.contentattributevalue",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "list",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The list this attribute is assigned to.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.list",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical List Attribute Assignment",
                "verbose_name_plural": "historical List Attribute Assignments",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ListAttributeAssignment",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "attribute_value",
                    models.ForeignKey(
                        help_text="The attribute value assigned to the list.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.contentattributevalue",
                    ),
                ),
                (
                    "list",
                    models.ForeignKey(
                        help_text="The list this attribute is assigned to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.list",
                    ),
                ),
            ],
            options={
                "verbose_name": "List Attribute Assignment",
                "verbose_name_plural": "List Attribute Assignments",
                "unique_together": {("list", "attribute_value")},
            },
        ),
        migrations.AddField(
            model_name="list",
            name="attributes",
            field=models.ManyToManyField(
                blank=True,
                help_text="Gang attributes like Alignment, Alliance, Affiliation",
                through="core.ListAttributeAssignment",
                through_fields=("list", "attribute_value"),
                to="content.contentattributevalue",
            ),
        ),
        migrations.RemoveIndex(
            model_name="campaign",
            name="core_campai_status_7e2b43_idx",
        ),
        migrations.RemoveIndex(
            model_name="list",
            name="core_list_status_3f8a91_idx",
        ),
        migrations.RemoveIndex(
            model_name="listfighter",
            name="core_listfi_injury__2adf42_idx",
        ),
        migrations.RemoveIndex(
            model_name="listfighter",
            name="core_listfi_xp_curr_9b3e1a_idx",
        ),
        migrations.RemoveIndex(
            model_name="listfighter",
            name="core_listfi_xp_tota_c4f892_idx",
        ),
        migrations.RemoveIndex(
            model_name="listfighter",
            name="core_listfi_list_ar_8e7f3b_idx",
        ),
        migrations.RemoveIndex(
            model_name="listfighter",
            name="core_listfi_list_in_4a9c2e_idx",
        ),
        migrations.CreateModel(
            name="CapturedFighter",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "captured_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When the fighter was captured"
                    ),
                ),
                (
                    "sold_to_guilders",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the fighter has been sold to guilders",
                    ),
                ),
                (
                    "sold_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the fighter was sold to guilders",
                        null=True,
                    ),
                ),
                (
                    "ransom_amount",
                    models.IntegerField(
                        blank=True,
                        help_text="Credits paid as ransom or received for selling",
                        null=True,
                    ),
                ),
                (
                    "capturing_list",
                    models.ForeignKey(
                        help_text="The gang currently holding this fighter captive",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="captured_fighters",
                        to="core.list",
                    ),
                ),
                (
                    "fighter",
                    models.OneToOneField(
                        help_text="The fighter who has been captured",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="capture_info",
                        to="core.listfighter",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Captured Fighter",
                "verbose_name_plural": "Captured Fighters",
                "ordering": ["-captured_at"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalCapturedFighter",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("created", models.DateTimeField(blank=True, editable=False)),
                ("modified", models.DateTimeField(blank=True, editable=False)),
                (
                    "captured_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="When the fighter was captured",
                    ),
                ),
                (
                    "sold_to_guilders",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the fighter has been sold to guilders",
                    ),
                ),
                (
                    "sold_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the fighter was sold to guilders",
                        null=True,
                    ),
                ),
                (
                    "ransom_amount",
                    models.IntegerField(
                        blank=True,
                        help_text="Credits paid as ransom or received for selling",
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "capturing_list",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The gang currently holding this fighter captive",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.list",
                    ),
                ),
                (
                    "fighter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The fighter who has been captured",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.listfighter",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Captured Fighter",
                "verbose_name_plural": "historical Captured Fighters",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="historicallistfighter",
            name="image",
            field=models.TextField(
                blank=True,
                help_text="Fighter portrait or image (appears in Info section)",
                max_length=100,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="historicallistfighter",
            name="save_roll",
            field=models.CharField(
                blank=True,
                help_text="Fighter's typical save roll (e.g. '5+' or '4+ inv')",
                max_length=10,
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="image",
            field=models.ImageField(
                blank=True,
                help_text="Fighter portrait or image (appears in Info section)",
                null=True,
                upload_to="fighter-images/",
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="save_roll",
            field=models.CharField(
                blank=True,
                help_text="Fighter's typical save roll (e.g. '5+' or '4+ inv')",
                max_length=10,
            ),
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                ("archived", models.BooleanField(default=False)),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "noun",
                    models.CharField(
                        choices=[
                            ("list", "List"),
                            ("list_fighter", "List Fighter"),
                            ("campaign", "Campaign"),
                            ("battle", "Battle"),
                            ("equipment_assignment", "Equipment Assignment"),
                            ("skill_assignment", "Skill Assignment"),
                            ("user", "User"),
                            ("upload", "Upload"),
                            ("fighter_advancement", "Fighter Advancement"),
                            ("campaign_action", "Campaign Action"),
                            ("campaign_resource", "Campaign Resource"),
                            ("campaign_asset", "Campaign Asset"),
                        ],
                        help_text="The type of object being acted upon",
                        max_length=50,
                    ),
                ),
                (
                    "verb",
                    models.CharField(
                        choices=[
                            ("create", "Create"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                            ("view", "View"),
                            ("archive", "Archive"),
                            ("restore", "Restore"),
                            ("submit", "Submit"),
                            ("confirm", "Confirm"),
                            ("join", "Join"),
                            ("leave", "Leave"),
                            ("assign", "Assign"),
                            ("unassign", "Unassign"),
                            ("activate", "Activate"),
                            ("deactivate", "Deactivate"),
                            ("approve", "Approve"),
                            ("reject", "Reject"),
                            ("import", "Import"),
                            ("export", "Export"),
                            ("add", "Add"),
                            ("remove", "Remove"),
                            ("clone", "Clone"),
                            ("reset", "Reset"),
                            ("login", "Login"),
                            ("logout", "Logout"),
                            ("signup", "Signup"),
                        ],
                        help_text="The action being performed",
                        max_length=50,
                    ),
                ),
                (
                    "object_id",
                    models.UUIDField(
                        blank=True,
                        help_text="UUID of the object being acted upon",
                        null=True,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address of the user when the action was taken",
                        null=True,
                    ),
                ),
                (
                    "context",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional context data in JSON format",
                    ),
                ),
                (
                    "object_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Type of the object for generic relations",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "session_id",
                    models.CharField(
                        blank=True,
                        help_text="Session ID of the user when the action was taken",
                        max_length=40,
                        null=True,
                    ),
                ),
                (
                    "field",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("password", "Password"),
                            ("email", "Email"),
                            ("mfa", "Multi-Factor Authentication"),
                            ("session", "Session"),
                            ("info", "Info"),
                        ],
                        help_text="The field being modified for UPDATE events",
                        max_length=50,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "event",
                "verbose_name_plural": "events",
                "ordering": ["-created"],
                "indexes": [
                    models.Index(
                        fields=["-created"], name="core_event_created_409a4e_idx"
                    ),
                    models.Index(
                        fields=["noun", "verb"], name="core_event_noun_20866e_idx"
                    ),
                    models.Index(
                        fields=["owner"], name="core_event_owner_i_e0a4d8_idx"
                    ),
                    models.Index(
                        fields=["object_type", "object_id"],
                        name="core_event_object__934a15_idx",
                    ),
                ],
            },
        ),
        migrations.AddField(
            model_name="historicallistfighter",
            name="private_notes",
            field=models.TextField(
                blank=True, help_text="Notes about the fighter (only visible to you)"
            ),
        ),
        migrations.AddField(
            model_name="listfighter",
            name="private_notes",
            field=models.TextField(
                blank=True, help_text="Notes about the fighter (only visible to you)"
            ),
        ),
    ]
