# Generated by Django 5.2.4 on 2025-07-31 11:46

import logging
from datetime import datetime, timezone

from django.db import migrations

logger = logging.getLogger(__name__)


def fix_movement_advances(apps, schema_editor):
    """Fix movement advances where the override equals base movement."""
    ListFighterAdvancement = apps.get_model("core", "ListFighterAdvancement")

    # Only fix advancements created before July 20th, 2025
    cutoff_date = datetime(2025, 7, 20, tzinfo=timezone.utc)

    # Find fighters with movement advancements created before the cutoff
    movement_advancements = ListFighterAdvancement.objects.filter(
        advancement_type="stat", stat_increased="movement", created__lt=cutoff_date
    ).select_related("fighter", "fighter__content_fighter")

    fixed_count = 0

    for advancement in movement_advancements:
        fighter = advancement.fighter
        content_fighter = fighter.content_fighter

        # Check if fighter has a movement override
        if fighter.movement_override:
            # Get base movement value (remove quotes if present)
            base_movement = (
                content_fighter.movement.replace('"', "")
                if content_fighter.movement
                else "0"
            )
            current_override = fighter.movement_override.replace('"', "")

            # Check if override equals base (indicating the advancement wasn't applied)
            if base_movement == current_override:
                try:
                    # Increment the movement by 1
                    new_movement = str(int(current_override) + 1)

                    # Preserve quote format if original had quotes
                    if '"' in content_fighter.movement:
                        new_movement = f'{new_movement}"'

                    fighter.movement_override = new_movement
                    fighter.save()
                    fixed_count += 1
                except (ValueError, TypeError):
                    # Skip if we can't parse the movement value
                    continue

    logger.info(f"Fixed {fixed_count} fighters with movement advancements")


def reverse_fix_movement_advances(apps, schema_editor):
    """Reverse the movement advancement fix."""
    # This is intentionally left as a no-op since we don't want to
    # undo legitimate fixes to movement advancements
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0087_alter_historicallist_name_and_more"),
    ]

    operations = [
        migrations.RunPython(
            fix_movement_advances,
            reverse_fix_movement_advances,
        ),
    ]
